from fastapi import APIRouter, HTTPException
from typing import Dict, Any
import logging
import re
from datetime import datetime
from app.services.change_chain_service import change_chain_service
from app.services.checklist_service import checklist_service
from app.services.user_story_creator_service import user_story_creator_service

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/v1", tags=["Advanced Features"])

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
pending_user_story_requests = {}

@router.post("/change-chain-chat")
async def change_chain_chat(request: Dict[str, str]) -> Dict[str, Any]:
    """
    Process natural language request for creating change chains
    """
    try:
        message = request.get("message", "")
        if not message:
            raise HTTPException(status_code=400, detail="Message is required")
        
        logger.info(f"Processing request: {message}")
        
        # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        query_lower = message.lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories –∏–ª–∏ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
        if await is_user_story_creation_request(message):
            logger.info("‚úÖ –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories –∏–ª–∏ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤")
            result = await handle_user_story_creation_request_advanced(message)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç handle_user_story_creation_request_advanced: success={result.get('success')}, needs_confirmation={result.get('needs_confirmation')}")
            logger.info(f"üîç –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {result.get('message', 'No message')}")
            return result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ)
        is_confirmation = query_lower in ["–¥–∞", "—Å–æ–∑–¥–∞—Ç—å", "yes", "create", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–Ω–µ—Ç", "–æ—Ç–º–µ–Ω–∞", "no", "cancel", "–∞", "–¥"]
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: '{query_lower}' -> is_confirmation={is_confirmation}")
        
        if is_confirmation:
            logger.info("‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è User Stories")
            result = await handle_user_confirmation_advanced(message)
            logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {result}")
            return result
        
        # Check TFS connection before processing request
        tfs_connected = await change_chain_service.tfs_service.test_connection()
        if not tfs_connected:
            raise HTTPException(status_code=503, detail="TFS service is not available")
        
        logger.info(f"Processing change chain request: {message}")
        
        # Parse the request using OpenAI
        parsed_data = await change_chain_service.parse_change_request(message)
        
        # Create the change chain
        result = await change_chain_service.create_linked_change_chain(
            project=parsed_data["project"],
            request_title=parsed_data["requestTitle"],
            source_backlog_id=parsed_data["sourceBacklogId"],
            request_id=parsed_data.get("requestId")
        )
        
        return {
            "success": True,
            "message": "‚úÖ –¶–µ–ø–æ—á–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            "data": result,
            "parsed_request": parsed_data
        }
        
    except Exception as e:
        logger.error(f"Error in change chain chat: {str(e)}")
        return {
            "success": False,
            "error": str(e),
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {str(e)}"
        }

async def handle_user_confirmation_advanced(message: str) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è User Stories (–¥–ª—è advanced endpoints)
    """
    try:
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        confirmation_text = message.lower().strip()
        is_confirmed = confirmation_text in ["–¥–∞", "—Å–æ–∑–¥–∞—Ç—å", "yes", "create", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–∞", "–¥"]
        
        if not is_confirmed:
            return {
                "success": False,
                "message": "–°–æ–∑–¥–∞–Ω–∏–µ User Stories –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            }
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories
        if not pending_user_story_requests:
            return {
                "success": False,
                "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ."
            }
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å (—Å–∞–º—ã–π —Å–≤–µ–∂–∏–π)
        latest_request_id = max(pending_user_story_requests.keys(), 
                              key=lambda x: pending_user_story_requests[x]["created_at"])
        request_data = pending_user_story_requests[latest_request_id]
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {latest_request_id}")
        logger.info(f"üîó URL Confluence: {request_data['confluence_url']}")
        
        # –°–æ–∑–¥–∞–µ–º User Stories —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        creation_result = await user_story_creator_service.create_user_stories_from_confluence(
            confluence_url=request_data["confluence_url"],
            user_confirmation="–î–∞"
        )
        
        if creation_result["success"]:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            del pending_user_story_requests[latest_request_id]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            created_stories = creation_result["created_stories"]
            parent_ticket = creation_result.get("parent_ticket", "")
            confluence_url = request_data["confluence_url"]
            
            message_parts = [
                "‚úÖ User Stories —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ:",
                f"üìÑ –°—Ç–∞—Ç—å—è: <a href=\"{confluence_url}\" target=\"_blank\">{confluence_url}</a>",
                f"üîó –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–∫–µ—Ç: <a href=\"#\" onclick=\"openTfsTicket('{parent_ticket}')\">{parent_ticket}</a>",
                f"üìä –°–æ–∑–¥–∞–Ω–æ User Stories: {len(created_stories)}"
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π User Story
            for i, story in enumerate(created_stories, 1):
                story_id = story.get("id", "")
                story_title = story.get("title", "")
                story_url = story.get("url", "")
                message_parts.extend([
                    f"üìã US {i}: <a href=\"{story_url}\" target=\"_blank\">{story_id}</a> - {story_title}",
                    f"üîó –°–≤—è–∑–∞–Ω —Å: <a href=\"#\" onclick=\"openTfsTicket('{parent_ticket}')\">#{parent_ticket}</a> (–†–æ–¥–∏—Ç–µ–ª—å –≤ Backlog)"
                ])
            
            detailed_message = "<br>".join(message_parts)
            
            return {
                "success": True,
                "message": detailed_message,
                "created_stories": created_stories,
                "data": {
                    "created_stories": created_stories,
                    "parent_ticket": parent_ticket,
                    "confluence_url": confluence_url
                }
            }
        else:
            return {
                "success": False,
                "error": creation_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ User Stories: {creation_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}")
        return {
            "success": False,
            "error": str(e),
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}"
        }

@router.post("/checklist-chat")
async def checklist_chat(request: Dict[str, str]) -> Dict[str, Any]:
    """
    Process checklist request: –°–æ–∑–¥–∞–π —á–µ–∫-–ª–∏—Å—Ç –ë–î–ö –ó–ó–õ #<id>
    """
    try:
        # Check TFS connection before processing request
        tfs_connected = await checklist_service.tfs_service.test_connection()
        if not tfs_connected:
            raise HTTPException(status_code=503, detail="TFS service is not available")
        
        message = request.get("message", "")
        if not message:
            raise HTTPException(status_code=400, detail="Message is required")
        
        logger.info(f"Processing checklist request: {message}")
        
        # Parse work item ID from message
        work_item_id = _parse_checklist_request(message)
        if not work_item_id:
            raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID —Ä–∞–±–æ—á–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ")
        
        # Create checklist
        checklist = await checklist_service.create_checklist(work_item_id)
        
        return {
            "success": True,
            "message": f"–ß–µ–∫-–ª–∏—Å—Ç –ë–î–ö –ó–ó–õ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ #{work_item_id}",
            "work_item_id": work_item_id,
            "checklist": checklist
        }
        
    except Exception as e:
        logger.error(f"Error in checklist chat: {str(e)}")
        return {
            "success": False,
            "error": str(e),
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–∞: {str(e)}"
        }

def _parse_checklist_request(message: str) -> int:
    """
    Parse work item ID from checklist request
    Format: –°–æ–∑–¥–∞–π —á–µ–∫-–ª–∏—Å—Ç –ë–î–ö –ó–ó–õ #<number>
    """
    
    # Pattern to match: –°–æ–∑–¥–∞–π —á–µ–∫-–ª–∏—Å—Ç –ë–î–ö –ó–ó–õ #<number>
    pattern = r'–°–æ–∑–¥–∞–π\s+—á–µ–∫-–ª–∏—Å—Ç\s+–ë–î–ö\s+–ó–ó–õ\s+#(\d+)'
    match = re.search(pattern, message, re.IGNORECASE)
    
    if match:
        return int(match.group(1))
    
    # Alternative pattern: just look for #<number> anywhere in the message
    pattern = r'#(\d+)'
    match = re.search(pattern, message)
    
    if match:
        return int(match.group(1))
    
    return None

@router.get("/service-status")
async def get_service_status() -> Dict[str, Any]:
    """
    Get status of all integrated services
    """
    try:
        status = {
            "timestamp": datetime.now().isoformat(),
            "services": {}
        }
        
        # Check TFS service
        try:
            tfs_connected = await change_chain_service.tfs_service.test_connection()
            if tfs_connected:
                projects = await change_chain_service.tfs_service.get_projects()
                status["services"]["tfs"] = {
                    "status": "online",
                    "projects_count": len(projects),
                    "url": change_chain_service.tfs_service.base_url
                }
            else:
                status["services"]["tfs"] = {
                    "status": "offline",
                    "error": "Connection test failed"
                }
        except Exception as e:
            status["services"]["tfs"] = {
                "status": "offline",
                "error": str(e)
            }
        
        # Check OpenAI service
        # try:
        #     # Simple test request
        #     test_response = await change_chain_service.openai_service.client.chat.completions.create(
        #         model=change_chain_service.openai_service.model,
        #         messages=[{"role": "user", "content": "test"}],
        #         max_tokens=10
        #     )
        #     status["services"]["openai"] = {
        #         "status": "online",
        #         "model": change_chain_service.openai_service.model
        #     }
        # except Exception as e:
        #     status["services"]["openai"] = {
        #         "status": "offline",
        #         "error": str(e)
        #     }
        # 
        # Check Confluence service
        # try:
        #     from app.services.confluence_service import confluence_service
        #     # Test Confluence connection by getting spaces
        #     spaces = await confluence_service.get_spaces()
        #     status["services"]["confluence"] = {
        #         "status": "online",
        #         "spaces_count": len(spaces) if spaces else 0,
        #         "url": confluence_service.base_url
        #     }
        # except Exception as e:
        #     status["services"]["confluence"] = {
        #         "status": "offline",
        #         "error": str(e)
        #     }
        # 
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ service_status.log
        try:
            with open("service_status.log", "a", encoding="utf-8") as logf:
                logf.write(f"[{datetime.now().isoformat()}] {status}\n")
        except Exception as log_err:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ service_status.log: {log_err}")
        
        return status
        
    except Exception as e:
        logger.error(f"Error getting service status: {str(e)}")
        return {
            "success": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ User Stories
async def is_user_story_creation_request(query: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories –∏–∑ Confluence
    """
    query_lower = query.lower()
    logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ User Story: '{query_lower}'")
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    creation_keywords = [
        "—Å–æ–∑–¥–∞–π us –≤ tfs",
        "—Å–æ–∑–¥–∞—Ç—å us –≤ tfs", 
        "—Å–æ–∑–¥–∞–π user story –≤ tfs",
        "—Å–æ–∑–¥–∞—Ç—å user story –≤ tfs",
        "—Å–æ–∑–¥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ tfs",
        "—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ tfs",
        "—Å–æ–∑–¥–∞–π us",
        "—Å–æ–∑–¥–∞—Ç—å us",
        "—Å–æ–∑–¥–∞–π user story",
        "—Å–æ–∑–¥–∞—Ç—å user story",
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
        "—Å–æ–∑–¥–∞–π —Ü–µ–ø–æ—á–∫—É",
        "—Å–æ–∑–¥–∞—Ç—å —Ü–µ–ø–æ—á–∫—É",
        "—Å–æ–∑–¥–∞–π —Ü–µ–ø–æ—á–∫—É —Ç–∏–∫–µ—Ç–æ–≤",
        "—Å–æ–∑–¥–∞—Ç—å —Ü–µ–ø–æ—á–∫—É —Ç–∏–∫–µ—Ç–æ–≤",
        "—Å–æ–∑–¥–∞–π —Ü–µ–ø–æ—á–∫—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤",
        "—Å–æ–∑–¥–∞—Ç—å —Ü–µ–ø–æ—á–∫—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤",
        "—Ü–µ–ø–æ—á–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤",
        "—Ü–µ–ø–æ—á–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for keyword in creation_keywords:
        if keyword in query_lower:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}'")
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL Confluence
    confluence_url_patterns = [
        "confluence.systtech.ru",
        "confluence",
        "pageid=",
        "pages/viewpage.action"
    ]
    
    for pattern in confluence_url_patterns:
        if pattern in query_lower:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω URL Confluence: '{pattern}'")
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é "—Å–æ–∑–¥–∞–π" + "–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏" + URL
    if "—Å–æ–∑–¥–∞–π" in query_lower and "–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏" in query_lower:
        logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è '—Å–æ–∑–¥–∞–π' + '–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏'")
        return True
    
    logger.info("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories")
    return False

async def handle_user_story_creation_request_advanced(message: str) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories –∏–∑ Confluence –∏–ª–∏ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤ (–¥–ª—è advanced endpoints)
    """
    try:
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ: {message}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
        query_lower = message.lower()
        chain_keywords = ["—Ü–µ–ø–æ—á–∫–∞", "—Ü–µ–ø–æ—á–∫—É", "—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"]
        is_chain_request = any(keyword in query_lower for keyword in chain_keywords)
        
        if is_chain_request:
            logger.info("üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤")
            return await handle_change_chain_request_advanced(message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories: {message}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        confluence_url = extract_confluence_url(message)
        if not confluence_url:
            return {
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence –≤ –∑–∞–ø—Ä–æ—Å–µ",
                "message": "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence"
            }
        
        # –°–æ–∑–¥–∞–µ–º User Stories —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
        logger.info(f"üîó URL Confluence: {confluence_url}")
        creation_result = await user_story_creator_service.create_user_stories_from_confluence(
            confluence_url=confluence_url,
            user_confirmation=None  # –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –Ω—É–∂–µ–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        )
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è: success={creation_result.get('success')}, needs_confirmation={creation_result.get('needs_confirmation')}")
        
        if creation_result["success"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            if creation_result.get("needs_confirmation"):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                preview_data = creation_result["preview"]
                logger.info(f"üîç Preview data keys: {list(preview_data.keys()) if preview_data else 'None'}")
                logger.info(f"üîç User stories count: {len(preview_data.get('user_stories', [])) if preview_data else 'No preview_data'}")
                
                if not preview_data or 'user_stories' not in preview_data:
                    logger.error("‚ùå Preview data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç user_stories")
                    return {
                        "success": False,
                        "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
                        "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ User Stories"
                    }
                
                try:
                    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ preview message")
                    preview_message = f"–ù–∞–π–¥–µ–Ω–æ {len(preview_data['user_stories'])} User Stories –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n\n"
                    logger.info(f"üîç –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {len(preview_message)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    for i, us in enumerate(preview_data["user_stories"], 1):
                        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º US {i}: {us.get('title', 'No title')}")
                        preview_message += f"{i}. **{us['title']}**\n"
                        preview_message += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {us['description'][:100]}...\n"
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏
                        if us.get('given_conditions') or us.get('when_actions') or us.get('then_results'):
                            preview_message += f"   –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏ (–î–∞–Ω–æ/–ö–æ–≥–¥–∞/–¢–æ–≥–¥–∞):\n"
                            if us.get('given_conditions'):
                                preview_message += f"     –î–∞–Ω–æ: {us['given_conditions'][:80]}...\n"
                            if us.get('when_actions'):
                                preview_message += f"     –ö–æ–≥–¥–∞: {us['when_actions'][:80]}...\n"
                            if us.get('then_results'):
                                preview_message += f"     –¢–æ–≥–¥–∞: {us['then_results'][:80]}...\n"
                        elif us.get('acceptance_criteria'):
                            preview_message += f"   –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏:\n"
                            for j, criteria in enumerate(us['acceptance_criteria'], 1):
                                # –ï—Å–ª–∏ —ç—Ç–æ HTML —Ç–∞–±–ª–∏—Ü–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—É
                                if criteria.startswith('<table'):
                                    preview_message += f"     {criteria[:200]}...\n"
                                else:
                                    preview_message += f"     {j}. {criteria[:60]}...\n"
                        else:
                            preview_message += f"   –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                        
                        preview_message += "\n"
                        logger.info(f"üîç US {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                    preview_message += "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: '–î–∞' –∏–ª–∏ '–°–æ–∑–¥–∞—Ç—å'\n"
                    preview_message += "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: '–ù–µ—Ç' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'"
                    logger.info(f"‚úÖ Preview message —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ: {len(preview_message)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ preview message: {str(e)}")
                    logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                    import traceback
                    logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
                    return {
                        "success": False,
                        "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}",
                        "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}"
                    }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                request_id = f"us_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                pending_user_story_requests[request_id] = {
                    "confluence_url": confluence_url,
                    "preview_data": preview_data,
                    "created_at": datetime.now()
                }
                
                logger.info("üîç –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
                result = {
                    "success": True,
                    "message": preview_message,
                    "needs_confirmation": True,
                    "data": {
                        "confluence_url": confluence_url,
                        "preview": preview_data,
                        "request_id": request_id
                    }
                }
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ: success={result['success']}, needs_confirmation={result['needs_confirmation']}")
                return result
            else:
                # User Stories —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã (—ç—Ç–æ—Ç —Å–ª—É—á–∞–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ user_confirmation=None)
                logger.warning("‚ö†Ô∏è User Stories —Å–æ–∑–¥–∞–Ω—ã –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - —ç—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ")
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(creation_result['created_stories'])} User Stories")
                return {
                    "success": True,
                    "message": f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(creation_result['created_stories'])} User Stories –∏–∑ —Å—Ç–∞—Ç—å–∏ Confluence",
                    "data": {
                        "created_stories": creation_result["created_stories"],
                        "parent_ticket": creation_result["parent_ticket"],
                        "confluence_url": confluence_url
                    }
                }
        else:
            logger.error(f"‚ùå –°–æ–∑–¥–∞–Ω–∏–µ User Stories –Ω–µ —É–¥–∞–ª–æ—Å—å: {creation_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return {
                "success": False,
                "error": creation_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ User Stories: {creation_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            }
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è User Stories: {str(e)}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return {
            "success": False,
            "error": str(e),
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ User Stories: {str(e)}"
        }

async def handle_change_chain_request_advanced(message: str) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤ (–¥–ª—è advanced endpoints)
    """
    try:
        logger.info(f"üîó –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤: {message}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Ü–µ–ø–æ—á–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        from app.services.change_chain_service import change_chain_service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TFS
        tfs_connected = await change_chain_service.tfs_service.test_connection()
        if not tfs_connected:
            return {
                "success": False,
                "error": "TFS —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "message": "TFS —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
            }
        
        # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
        parsed_data = await change_chain_service.parse_change_request(message)
        
        if not parsed_data.get("sourceBacklogId"):
            return {
                "success": False,
                "error": "–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #123456"
            }
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
        chain_result = await change_chain_service.create_linked_change_chain(
            project=parsed_data["project"],
            request_title=parsed_data["requestTitle"],
            source_backlog_id=parsed_data["sourceBacklogId"],
            request_id=parsed_data.get("requestId")
        )
        
        if chain_result.get("success"):
            message_text = f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤:\n\n"
            message_text += f"üìã **Epic**: {chain_result.get('Epic', {}).get('title', 'N/A')}\n"
            message_text += f"üîó **Feature**: {chain_result.get('Feature', {}).get('title', 'N/A')}\n"
            message_text += f"üìù **Backlog Item**: {chain_result.get('Backlog Item', {}).get('title', 'N/A')}\n\n"
            message_text += f"üéØ **–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–∏–∫–µ—Ç**: #{parsed_data['sourceBacklogId']}\n"
            message_text += f"üîó **–°–≤—è–∑—å**: Backlog Item —Å–≤—è–∑–∞–Ω —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–∏–∫–µ—Ç–æ–º –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç"
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è #{parsed_data['sourceBacklogId']}")
            return {
                "success": True,
                "message": message_text,
                "data": chain_result,
                "parsed_request": parsed_data
            }
        else:
            return {
                "success": False,
                "error": chain_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤: {chain_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            }
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ü–µ–ø–æ—á–∫—É —Ç–∏–∫–µ—Ç–æ–≤: {str(e)}")
        return {
            "success": False,
            "error": str(e),
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤: {str(e)}"
        }

def extract_confluence_url(query: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
    url_patterns = [
        r'https://confluence\.systtech\.ru/pages/viewpage\.action\?pageId=\d+',
        r'https://confluence\.systtech\.ru/.*?pageId=(\d+)',
        r'confluence\.systtech\.ru.*?pageId=(\d+)',
        r'pageId=(\d+)'
    ]
    
    for pattern in url_patterns:
        match = re.search(pattern, query, re.IGNORECASE)
        if match:
            if 'pageId=' in match.group(0):
                return match.group(0)
            else:
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ pageId, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
                page_id = match.group(1)
                return f"https://confluence.systtech.ru/pages/viewpage.action?pageId={page_id}"
    
    return None
