import logging
import asyncio
from typing import Dict, Any
from app.services.openai_service import OpenAIService
from app.services.confluence_service import ConfluenceService
from app.services.tfs_service import TFSService
from app.config.settings import settings

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
global_services: Dict[str, Any] = {}

async def initialize_extensions():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    """
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π...")
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        await _initialize_core_services()
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await _test_connections()
        
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        await _initialize_extensions()
        
        # 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        _configure_logging()
        
        logger.info("‚úÖ –í—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise

async def _initialize_core_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        # OpenAI Service
        logger.info("- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI Service...")
        openai_service = OpenAIService()
        global_services["openai"] = openai_service
        logger.info("  ‚úÖ OpenAI Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # Confluence Service
        logger.info("- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Confluence Service...")
        confluence_service = ConfluenceService()
        global_services["confluence"] = confluence_service
        logger.info("  ‚úÖ Confluence Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # TFS Service
        logger.info("- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TFS Service...")
        tfs_service = TFSService()
        global_services["tfs"] = tfs_service
        logger.info("  ‚úÖ TFS Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        logger.info("üéØ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        raise

async def _test_connections():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º"""
    
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    
    connection_results = {}
    
    # –¢–µ—Å—Ç OpenAI - –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û (—Ç–æ–∫–µ–Ω—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã)
    # try:
    #     openai_service = global_services["openai"]
    #     openai_ok = await openai_service.test_connection()
    #     connection_results["openai"] = openai_ok
    #     logger.info(f"  OpenAI: {'‚úÖ' if openai_ok else '‚ùå'}")
    # except Exception as e:
    #     logger.warning(f"  OpenAI: ‚ùå {e}")
    #     connection_results["openai"] = False
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º OpenAI
    connection_results["openai"] = False
    logger.info("  OpenAI: ‚ùå (–æ—Ç–∫–ª—é—á–µ–Ω - —Ç–æ–∫–µ–Ω—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã)")
    
    # –¢–µ—Å—Ç Confluence
    try:
        confluence_service = global_services["confluence"]
        confluence_ok = confluence_service.test_connection()
        connection_results["confluence"] = confluence_ok
        logger.info(f"  Confluence: {'‚úÖ' if confluence_ok else '‚ùå'}")
    except Exception as e:
        logger.warning(f"  Confluence: ‚ùå {e}")
        connection_results["confluence"] = False
    
    # –¢–µ—Å—Ç TFS
    try:
        tfs_service = global_services["tfs"]
        tfs_ok = tfs_service.test_connection()
        connection_results["tfs"] = tfs_ok
        logger.info(f"  TFS: {'‚úÖ' if tfs_ok else '‚ùå'}")
    except Exception as e:
        logger.warning(f"  TFS: ‚ùå {e}")
        connection_results["tfs"] = False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    global_services["connection_status"] = connection_results
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
    failed_services = [name for name, status in connection_results.items() if not status]
    if failed_services:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {', '.join(failed_services)}")
        logger.warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
    else:
        logger.info("üéâ –í—Å–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã")

async def _initialize_extensions():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã)"""
    
    logger.info("üß© –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π...")
    
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è
        # –ù–∞–ø—Ä–∏–º–µ—Ä:
        # - GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        # - Jira –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        # - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        # - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        extensions_count = 0
        logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {extensions_count}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è—Ö
        global_services["extensions"] = {
            "loaded": extensions_count,
            "available": [],
            "failed": []
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
        global_services["extensions"] = {"loaded": 0, "available": [], "failed": [str(e)]}

def _configure_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    log_level = getattr(logging, settings.LOG_LEVEL.upper(), logging.INFO)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π
    if not root_logger.handlers:
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        root_logger.addHandler(console_handler)
    
    logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å: {settings.LOG_LEVEL}")

def get_service(service_name: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –∏–º–µ–Ω–∏
    
    Args:
        service_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ ("openai", "confluence", "tfs")
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    return global_services.get(service_name)

def get_connection_status() -> Dict[str, bool]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º"""
    return global_services.get("connection_status", {})

def get_system_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "services_loaded": len([k for k in global_services.keys() if k not in ["connection_status", "extensions"]]),
        "connections": get_connection_status(),
        "extensions": global_services.get("extensions", {}),
        "debug_mode": settings.DEBUG,
        "log_level": settings.LOG_LEVEL
    }

async def cleanup_extensions():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π –∏ —Ç.–¥.
        
        global_services.clear()
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
def is_openai_available() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI"""
    return get_connection_status().get("openai", False)

def is_confluence_available() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Confluence"""
    return get_connection_status().get("confluence", False)

def is_tfs_available() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ TFS"""
    return get_connection_status().get("tfs", False)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
def get_openai_service():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ OpenAI —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    if not is_openai_available():
        raise RuntimeError("OpenAI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
    return get_service("openai")

def get_confluence_service():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Confluence —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    if not is_confluence_available():
        raise RuntimeError("Confluence —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    return get_service("confluence")

def get_tfs_service():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ TFS —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    if not is_tfs_available():
        raise RuntimeError("TFS —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    return get_service("tfs")