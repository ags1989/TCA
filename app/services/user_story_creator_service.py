import re
import json
import logging
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime
from bs4 import BeautifulSoup
import html
import uuid

from app.services.confluence_service import confluence_service
from app.services.tfs_service import tfs_service
from app.core.logging_config import log_tfs_operation

logger = logging.getLogger(__name__)

class UserStoryData:
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è User Story –∏–∑ Confluence"""
    def __init__(self, title: str, description: str, acceptance_criteria: List[str], 
                 user_story_text: str, us_number: str, given_conditions: str = None,
                 when_actions: str = None, then_results: str = None):
        self.title = title
        self.description = description
        self.acceptance_criteria = acceptance_criteria
        self.user_story_text = user_story_text
        self.us_number = us_number
        self.given_conditions = given_conditions
        self.when_actions = when_actions
        self.then_results = then_results

class ConfluencePageData:
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence"""
    def __init__(self, title: str, project: str, tfs_number: str, url: str, 
                 user_stories: List[UserStoryData], team: str = None):
        self.title = title
        self.project = project
        self.tfs_number = tfs_number
        self.url = url
        self.user_stories = user_stories
        self.team = team

class UserStoryCreatorService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è User Stories –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü Confluence"""
    
    def __init__(self):
        self.confluence_service = confluence_service
        self.tfs_service = tfs_service
    
    async def create_user_stories_from_confluence(self, confluence_url: str, 
                                                user_confirmation: str = None) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è User Stories –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence
        
        Args:
            confluence_url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence
            user_confirmation: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("–î–∞"/"–ù–µ—Ç")
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        """
        try:
            # 1. –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence
            page_data = await self._parse_confluence_page(confluence_url)
            
            if not page_data.user_stories:
                return {
                    "success": False,
                    "error": "–í —Å—Ç–∞—Ç—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã User Stories",
                    "preview": None
                }
            
            # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            logger.info(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ preview –¥–ª—è {len(page_data.user_stories)} User Stories")
            preview = self._create_preview(page_data)
            logger.info(f"‚úÖ Preview —Å–æ–∑–¥–∞–Ω: {preview.get('user_stories_count', 0)} User Stories")
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            if user_confirmation is None:
                logger.info("üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return {
                    "success": True,
                    "preview": preview,
                    "needs_confirmation": True,
                    "page_data": page_data.__dict__
                }
            
            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not self._is_confirmation_positive(user_confirmation):
                return {
                    "success": False,
                    "error": "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                    "preview": preview
                }
            
            # 4. –°–æ–∑–¥–∞–Ω–∏–µ User Stories –≤ TFS
            creation_result = await self._create_user_stories_in_tfs(page_data)
            
            # 5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self._log_creation_results(creation_result, page_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            has_errors = len(creation_result.get("errors", [])) > 0
            has_created = len(creation_result.get("created_stories", [])) > 0
            
            if has_errors and not has_created:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ
                return {
                    "success": False,
                    "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π User Story. –û—à–∏–±–∫–∏: {'; '.join(creation_result['errors'])}",
                    "created_stories": creation_result["created_stories"],
                    "parent_ticket": page_data.tfs_number,
                    "confluence_url": confluence_url,
                    "preview": preview
                }
            elif has_errors and has_created:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –Ω–æ —á—Ç–æ-—Ç–æ —Å–æ–∑–¥–∞–Ω–æ
                return {
                    "success": True,
                    "message": f"–°–æ–∑–¥–∞–Ω–æ {len(creation_result['created_stories'])} User Stories, –Ω–æ –±—ã–ª–∏ –æ—à–∏–±–∫–∏: {'; '.join(creation_result['errors'])}",
                    "created_stories": creation_result["created_stories"],
                    "parent_ticket": page_data.tfs_number,
                    "confluence_url": confluence_url,
                    "preview": preview,
                    "warnings": creation_result["errors"]
                }
            else:
                # –í—Å–µ —É—Å–ø–µ—à–Ω–æ
                return {
                    "success": True,
                    "message": f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(creation_result['created_stories'])} User Stories",
                    "created_stories": creation_result["created_stories"],
                    "parent_ticket": page_data.tfs_number,
                    "confluence_url": confluence_url,
                    "preview": preview
                }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ User Stories: {str(e)}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ User Stories: {str(e)}",
                "preview": None
            }
    
    async def _parse_confluence_page(self, confluence_url: str) -> ConfluencePageData:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ pageId –∏–∑ URL
            page_id = self._extract_page_id(confluence_url)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Confluence
            article = await self.confluence_service.get_article_by_id(page_id)
            if not article:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å ID: {page_id}")
            
            page_content = {
                "title": article.title,
                "content": article.content
            }
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata = await self._parse_metadata(page_content)
            logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è TFS –Ω–æ–º–µ—Ä–∞
            if not metadata.get("tfs_number"):
                logger.warning("‚ö†Ô∏è TFS –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö!")
                logger.info(f"üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
                logger.info(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {page_content.get('title', '–ù–ï –ù–ê–ô–î–ï–ù')}")
                logger.info(f"   –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(page_content.get('content', ''))}")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ TFS –Ω–æ–º–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
                content = page_content.get('content', '')
                if 'TFS' in content.upper() or '‚Ññ' in content:
                    logger.info("üîç –í –∫–æ–Ω—Ç–µ–Ω—Ç–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ TFS –∏–ª–∏ ‚Ññ")
                    # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    preview = content[:500].replace('\n', ' ').replace('\r', ' ')
                    logger.info(f"   –ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {preview}...")
                else:
                    logger.warning("‚ö†Ô∏è –í –∫–æ–Ω—Ç–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ TFS –∏–ª–∏ ‚Ññ")
            else:
                logger.info(f"‚úÖ TFS –Ω–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω: {metadata.get('tfs_number')}")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ User Stories
            user_stories = self._parse_user_stories(page_content)
            
            return ConfluencePageData(
                title=page_content.get("title", ""),
                project=metadata.get("project", ""),
                tfs_number=metadata.get("tfs_number", ""),
                url=confluence_url,
                user_stories=user_stories,
                team=metadata.get("team", "")
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence: {str(e)}")
            raise
    
    def _extract_page_id(self, confluence_url: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ pageId –∏–∑ URL Confluence"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ URL Confluence
        patterns = [
            r'pageId=(\d+)',
            r'/pages/(\d+)/',
            r'/(\d+)/',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, confluence_url)
            if match:
                return match.group(1)
        
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å pageId –∏–∑ URL: {confluence_url}")
    
    async def _parse_metadata(self, page_content: Dict[str, Any]) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        content = page_content.get("content", "")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        soup = BeautifulSoup(content, 'html.parser')
        
        metadata = {}
        
        # –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ - –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫
        tables = soup.find_all('table')
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
        
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç, –∏—â–µ–º –¥—Ä—É–≥–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        if not tables:
            # –ü–æ–∏—Å–∫ –≤ div —Å –∫–ª–∞—Å—Å–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã
            table_divs = soup.find_all('div', class_=re.compile(r'table|grid|row', re.IGNORECASE))
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(table_divs)} div-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–∞–±–ª–∏—á–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏")
            
            # –ü–æ–∏—Å–∫ –≤ –ª—é–±—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å —Ç–µ–∫—Å—Ç–æ–º "‚Ññ TFS" –∏–ª–∏ "TFS"
            tfs_elements = soup.find_all(text=re.compile(r'‚Ññ\s*TFS|TFS', re.IGNORECASE))
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(tfs_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º TFS")
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å TFS, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä
            for element in tfs_elements:
                parent = element.parent
                while parent and parent.name not in ['html', 'body', 'document']:
                    # –ò—â–µ–º –Ω–æ–º–µ—Ä TFS –≤ —Ç–µ–∫—Å—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    text = parent.get_text()
                    tfs_match = re.search(r'‚Ññ\s*TFS[:\s]*(\d+)', text, re.IGNORECASE)
                    if tfs_match:
                        metadata['tfs_number'] = tfs_match.group(1)
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä TFS –≤ —Ç–µ–∫—Å—Ç–µ: {tfs_match.group(1)}")
                        break
                    parent = parent.parent
                if 'tfs_number' in metadata:
                    break
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ TFS –Ω–æ–º–µ—Ä–∞ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if 'tfs_number' not in metadata:
            logger.info("üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ TFS –Ω–æ–º–µ—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            page_text = soup.get_text()
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç - –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
            normalized_text = re.sub(r'\s+', ' ', page_text)
            logger.info(f"üîç –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {normalized_text[:200]}...")
            
            tfs_patterns = [
                r'‚Ññ\s*TFS[:\s]*(\d+)',
                r'TFS[:\s]*(\d+)',
                r'‚Ññ\s*(\d+)',
                r'—Ç–∏–∫–µ—Ç[:\s]*(\d+)',
                r'–∑–∞–¥–∞—á–∞[:\s]*(\d+)',
                r'—Ç–∏–∫–µ—Ç\s+(\d+)',
                r'–∑–∞–¥–∞—á–∞\s+(\d+)',
                r'–¥–ª—è\s+—Ç–∏–∫–µ—Ç–∞\s+(\d+)',
                r'–≤\s+—Å–∏—Å—Ç–µ–º–µ\s+TFS[:\s]*(\d+)',
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                r'‚Ññ\s*TFS\s+[^\d]*?(\d+)',
                r'‚Ññ\s*TFS\s+–ó–∞–ø—Ä–æ—Å\s+–Ω–∞\s+–∏–∑–º–µ–Ω–µ–Ω–∏–µ\s+(\d+)',
                r'‚Ññ\s*TFS\s+[–ê-–Ø–∞-—è\s]+?(\d+)'
            ]
            
            for pattern in tfs_patterns:
                tfs_match = re.search(pattern, normalized_text, re.IGNORECASE)
                if tfs_match:
                    metadata['tfs_number'] = tfs_match.group(1)
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä TFS –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '{pattern}': {tfs_match.group(1)}")
                    break
        
        for i, table in enumerate(tables):
            rows = table.find_all('tr')
            logger.info(f"üîç –¢–∞–±–ª–∏—Ü–∞ {i+1}: {len(rows)} —Å—Ç—Ä–æ–∫")
            
            for j, row in enumerate(rows):
                cells = row.find_all(['td', 'th'])
                if len(cells) >= 2:
                    key = cells[0].get_text(strip=True).lower()
                    value_cell = cells[1]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–π —è—á–µ–π–∫–µ
                    link = value_cell.find('a')
                    if link and ('‚Ññ' in key and 'tfs' in key):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ —Å—Å—ã–ª–∫–∏
                        href = link.get('href', '')
                        link_text = link.get_text(strip=True)
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ TFS: href='{href}', text='{link_text}'")
                        
                        # –ò—â–µ–º –Ω–æ–º–µ—Ä –≤ href –∏–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Å—ã–ª–∫–∏
                        tfs_match = re.search(r'(\d+)', href) or re.search(r'(\d+)', link_text)
                        if tfs_match:
                            metadata['tfs_number'] = tfs_match.group(1)
                            logger.info(f"‚úÖ TFS –Ω–æ–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Å—Å—ã–ª–∫–∏: {tfs_match.group(1)}")
                            break
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–ª–æ–∂–Ω–æ–π HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    # –ò—â–µ–º –ª—é–±—É—é —Å—Å—ã–ª–∫—É –≤ —è—á–µ–π–∫–µ, –µ—Å–ª–∏ –∫–ª—é—á —Å–æ–¥–µ—Ä–∂–∏—Ç TFS
                    if not metadata.get('tfs_number') and ('tfs' in key or '‚Ññ' in key):
                        all_links = value_cell.find_all('a')
                        for link in all_links:
                            href = link.get('href', '')
                            link_text = link.get_text(strip=True)
                            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É: href='{href}', text='{link_text}'")
                            
                            # –ò—â–µ–º –Ω–æ–º–µ—Ä –≤ href
                            tfs_match = re.search(r'(\d+)', href)
                            if tfs_match:
                                metadata['tfs_number'] = tfs_match.group(1)
                                logger.info(f"‚úÖ TFS –Ω–æ–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Å—Å—ã–ª–∫–∏ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫): {tfs_match.group(1)}")
                                break
                    
                    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                    value = value_cell.get_text(strip=True)
                    logger.info(f"üîç –°—Ç—Ä–æ–∫–∞ {j+1}: '{key}' = '{value}'")
                    
                    if '–ø—Ä–æ–µ–∫—Ç' in key:
                        metadata['project'] = value
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: {value}")
                    elif '‚Ññ tfs' in key or 'tfs' in key:
                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ TFS –∏–∑ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
                        tfs_match = re.search(r'(\d+)', value)
                        if tfs_match:
                            metadata['tfs_number'] = tfs_match.group(1)
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä TFS: {tfs_match.group(1)}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä TFS –∏–∑: {value}")
                    elif '–∫–æ–º–∞–Ω–¥–∞' in key:
                        metadata['team'] = value
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {value}")
        
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ—ë –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
        if 'team' not in metadata and metadata.get('tfs_number'):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ç–∏–∫–µ—Ç–µ –∏–∑ TFS
                parent_work_item = await self.tfs_service.get_work_item(int(metadata['tfs_number']))
                if parent_work_item and hasattr(parent_work_item, 'fields'):
                    # –ò—â–µ–º –ø–æ–ª–µ "–ö–æ–º–∞–Ω–¥–∞" –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ç–∏–∫–µ—Ç–µ
                    team_field = parent_work_item.fields.get('ST.Team') or parent_work_item.fields.get('System.Team')
                    if team_field:
                        metadata['team'] = team_field
                        logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ç–∏–∫–µ—Ç–µ #{metadata['tfs_number']}: {team_field}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ª–µ '–ö–æ–º–∞–Ω–¥–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ç–∏–∫–µ—Ç–µ #{metadata['tfs_number']}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–∏–∫–µ—Ç–∞: {str(e)}")
        
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º Foxtrot –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if 'team' not in metadata:
            metadata['team'] = 'Foxtrot'
            logger.info(f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: Foxtrot")
        
        return metadata
    
    def _parse_user_stories(self, page_content: Dict[str, Any]) -> List[UserStoryData]:
        """–ü–∞—Ä—Å–∏–Ω–≥ User Stories –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        content = page_content.get("content", "")
        soup = BeautifulSoup(content, 'html.parser')
        
        logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ User Stories –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_content.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        logger.info(f"üìÑ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        user_stories = []
        
        # –ü–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–∏ —Å User Stories
        us_section = self._find_user_stories_section(soup)
        if not us_section:
            logger.warning("‚ùå –°–µ–∫—Ü–∏—è —Å User Stories –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ User Stories –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            logger.info("üîç –ü–æ–∏—Å–∫ User Stories –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            us_section = self._find_user_stories_anywhere(soup)
            if not us_section:
                logger.warning("‚ùå User Stories –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏–≥–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return user_stories
            else:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ User Stories: {us_section.name if hasattr(us_section, 'name') else 'Unknown'}")
        else:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è —Å User Stories: {us_section.name if hasattr(us_section, 'name') else 'Unknown'}")
        
        # –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–∏–µ–º–∫–∏
        criteria_table = self._find_criteria_table(soup)
        if criteria_table:
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–∏–µ–º–∫–∏")
        else:
            logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–∏–µ–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–π User Story
        us_blocks = self._extract_user_story_blocks(us_section)
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(us_blocks)} –±–ª–æ–∫–æ–≤ User Stories –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        for i, block in enumerate(us_blocks, 1):
            logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫ {i} –∏–∑ {len(us_blocks)}")
            try:
                # –ï—Å–ª–∏ –±–ª–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —è—á–µ–π–∫—É User Story, –ø–µ—Ä–µ–¥–∞–µ–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
                if block.find('div', class_='user-story-cell') or block.find('div', class_='user-story-row'):
                    us_data = self._parse_single_user_story(block, f"US{i}", criteria_table)
                else:
                    us_data = self._parse_single_user_story(block, f"US{i}", criteria_table)
                
                if us_data:
                    logger.info(f"‚úÖ User Story {i} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {us_data.title}")
                    user_stories.append(us_data)
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫ {i}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∞ {i}: {str(e)}")
                continue
        
        return user_stories
    
    def _find_criteria_table(self, soup: BeautifulSoup) -> Optional[BeautifulSoup]:
        """–ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–∏–µ–º–∫–∏"""
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ "–î–∞–Ω–æ", "–ö–æ–≥–¥–∞", "–¢–æ–≥–¥–∞"
        tables = soup.find_all('table')
        for table in tables:
            headers = table.find_all('th')
            header_texts = [th.get_text(strip=True).lower() for th in headers]
            if any(keyword in ' '.join(header_texts) for keyword in ['–¥–∞–Ω–æ', '–∫–æ–≥–¥–∞', '—Ç–æ–≥–¥–∞']):
                logger.info("üîç –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–∏–µ–º–∫–∏")
                return table
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º, –∏—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        for table in tables:
            table_text = table.get_text().lower()
            if any(keyword in table_text for keyword in ['–¥–∞–Ω–æ', '–∫–æ–≥–¥–∞', '—Ç–æ–≥–¥–∞', '–∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏']):
                logger.info("üîç –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–∏–µ–º–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É")
                return table
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É, –∏—â–µ–º –≤ —Ç–æ–π –∂–µ —Ç–∞–±–ª–∏—Ü–µ, —á—Ç–æ –∏ User Stories
        for table in tables:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ User Stories, –∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            table_text = table.get_text().lower()
            has_user_story = any(keyword in table_text for keyword in ['—è, –∫–∞–∫', '—è –∫–∞–∫', '—è,–∫–∞–∫'])
            has_criteria = any(keyword in table_text for keyword in ['–¥–∞–Ω–æ', '–∫–æ–≥–¥–∞', '—Ç–æ–≥–¥–∞'])
            
            if has_user_story and has_criteria:
                logger.info("üîç –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å User Stories –∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–∏–µ–º–∫–∏")
                return table
        
        return None
    
    def _find_user_stories_section(self, soup: BeautifulSoup) -> Optional[BeautifulSoup]:
        """–ü–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–∏ —Å User Stories"""
        # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        headers = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
        for header in headers:
            text = header.get_text(strip=True).lower()
            if any(keyword in text for keyword in ['user story', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è', '–∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏']):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–µ–∫—Ü–∏–∏
                return header.find_parent()
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º —Å User Stories
        tables = soup.find_all('table')
        for table in tables:
            if self._table_contains_user_stories(table):
                return table
        
        return None
    
    def _find_user_stories_anywhere(self, soup: BeautifulSoup) -> Optional[BeautifulSoup]:
        """–ü–æ–∏—Å–∫ User Stories –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        logger.info("üîç –ü–æ–∏—Å–∫ User Stories –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º US1, US2, UserStory1 –∏ —Ç.–¥.
        us_prefix_pattern = r'(US\s*\d+|UserStory\s*\d+)'
        us_elements = soup.find_all(text=re.compile(us_prefix_pattern, re.IGNORECASE))
        
        if us_elements:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(us_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ User Stories")
            
            # –ò—â–µ–º –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ User Stories
            common_parent = us_elements[0].parent
            for element in us_elements[1:]:
                current_parent = element.parent
                while current_parent and current_parent != common_parent:
                    if common_parent in current_parent.find_all():
                        common_parent = current_parent
                        break
                    current_parent = current_parent.parent
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º: {common_parent.name if common_parent else 'None'}")
            return common_parent or soup
        
        # Fallback: –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É "–Ø, –∫–∞–∫" –∏–ª–∏ "—Ö–æ—á—É" –∏–ª–∏ "—á—Ç–æ–±—ã"
        text_elements = soup.find_all(text=re.compile(r'—è\s*,?\s*–∫–∞–∫|—Ö–æ—á—É|—á—Ç–æ–±—ã', re.IGNORECASE))
        if text_elements:
            logger.info(f"‚úÖ Fallback: –Ω–∞–π–¥–µ–Ω–æ {len(text_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º User Story")
            
            # –ò—â–µ–º –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ User Stories
            common_parent = text_elements[0].parent
            for element in text_elements[1:]:
                current_parent = element.parent
                while current_parent and current_parent != common_parent:
                    if common_parent in current_parent.find_all():
                        common_parent = current_parent
                        break
                    current_parent = current_parent.parent
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - —ç—Ç–æ td, –∏—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É
            if common_parent and common_parent.name == 'td':
                table = common_parent.find_parent('table')
                if table:
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è td: {table.name}")
                    return table
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ —Ç–µ–∫—Å—Ç—É: {common_parent.name if common_parent else 'None'}")
            return common_parent or soup
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º —Å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
        tables = soup.find_all('table')
        for table in tables:
            if self._table_contains_user_stories_wide(table):
                logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å User Stories")
                return table
        
        # –ü–æ–∏—Å–∫ –ø–æ —Å–ø–∏—Å–∫–∞–º
        lists = soup.find_all(['ul', 'ol'])
        for list_elem in lists:
            if self._list_contains_user_stories(list_elem):
                logger.info("‚úÖ –ù–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ —Å User Stories")
                return list_elem
        
        logger.warning("‚ùå User Stories –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏–≥–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return None
    
    def _table_contains_user_stories_wide(self, table) -> bool:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ User Stories"""
        text = table.get_text().lower()
        keywords = [
            '—è, –∫–∞–∫', '—è –∫–∞–∫', '—Ö–æ—á—É', '—á—Ç–æ–±—ã', 'user story', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è',
            '–¥–∞–Ω–æ', '–∫–æ–≥–¥–∞', '—Ç–æ–≥–¥–∞', '–∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏', '–∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏',
            '–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–∫–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        ]
        return any(keyword in text for keyword in keywords)
    
    def _list_contains_user_stories(self, list_elem) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ User Stories"""
        text = list_elem.get_text().lower()
        return any(keyword in text for keyword in ['—è, –∫–∞–∫', '—è –∫–∞–∫', '—Ö–æ—á—É', '—á—Ç–æ–±—ã'])
    
    def _extract_user_story_rows_from_table(self, table, start_row) -> List:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –æ–¥–Ω–æ–π User Story –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        rows = table.find_all('tr')
        us_rows = []
        start_index = rows.index(start_row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if start_index > 0:
            header_row = rows[0]
            if any(keyword in header_row.get_text().lower() for keyword in ['–Ω–∞–∑–≤–∞–Ω–∏–µ', 'user story', '–¥–∞–Ω–æ', '–∫–æ–≥–¥–∞', '—Ç–æ–≥–¥–∞']):
                us_rows.append(header_row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        us_rows.append(start_row)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —ç—Ç–æ–π User Story
        # –≠—Ç–æ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–π User Story
        for i in range(start_index + 1, len(rows)):
            row = rows[i]
            cells = row.find_all(['td', 'th'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–π User Story
            is_new_us = False
            for cell in cells:
                cell_text = cell.get_text(strip=True)
                if (re.match(r'US\d+', cell_text, re.IGNORECASE) or 
                    any(keyword in cell_text.lower() for keyword in ['—è, –∫–∞–∫', '—è –∫–∞–∫', '—Ö–æ—á—É', '—á—Ç–æ–±—ã']) or
                    'user story' in cell_text.lower()):
                    is_new_us = True
                    break
            
            if is_new_us:
                # –≠—Ç–æ –Ω–æ–≤–∞—è User Story, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                break
            else:
                # –≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π User Story
                us_rows.append(row)
        
        logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(us_rows)} —Å—Ç—Ä–æ–∫ –¥–ª—è User Story")
        return us_rows
    
    def _table_contains_user_stories(self, table) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ User Stories"""
        text = table.get_text().lower()
        has_keywords = any(keyword in text for keyword in ['user story', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è', '–¥–∞–Ω–æ', '–∫–æ–≥–¥–∞', '—Ç–æ–≥–¥–∞'])
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ User Stories: {has_keywords}")
        if has_keywords:
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ: {[kw for kw in ['user story', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è', '–¥–∞–Ω–æ', '–∫–æ–≥–¥–∞', '—Ç–æ–≥–¥–∞'] if kw in text]}")
        return has_keywords
    
    def _extract_user_story_blocks(self, section) -> List[BeautifulSoup]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ User Stories –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–∑–∞–≥–æ–ª–æ–≤–∫–∏ h3) –∏ —Ç–∞–±–ª–∏—Ü—ã"""
        blocks = []
        logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ User Stories –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∞–º–∞ —Å–µ–∫—Ü–∏—è —Ç–∞–±–ª–∏—Ü–µ–π
        if section.name == 'table':
            logger.info("üîç –°–µ–∫—Ü–∏—è —Å–∞–º–∞ —è–≤–ª—è–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–µ–π")
            if self._table_contains_user_stories(section):
                logger.info("üîç –¢–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç User Stories")
                us_blocks_from_table = self._extract_user_stories_from_table(section)
                blocks.extend(us_blocks_from_table)
                logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(us_blocks_from_table)} User Stories –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
            else:
                logger.info("üîç –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç User Stories")
        else:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º User Stories –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
            tables = section.find_all('table')
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü –≤ —Å–µ–∫—Ü–∏–∏")
            for i, table in enumerate(tables):
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É {i+1}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ User Stories
                if self._table_contains_user_stories(table):
                    logger.info("üîç –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å User Stories")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º User Stories –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                    us_blocks_from_table = self._extract_user_stories_from_table(table)
                    blocks.extend(us_blocks_from_table)
                    logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(us_blocks_from_table)} User Stories –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
                else:
                    logger.info(f"üîç –¢–∞–±–ª–∏—Ü–∞ {i+1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç User Stories")
        
        logger.info(f"üîç –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü: {len(blocks)} –±–ª–æ–∫–æ–≤")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö, –∏—â–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö h3
        if not blocks:
            h3_elements = section.find_all('h3')
            for h3 in h3_elements:
                text = h3.get_text(strip=True)
                if re.match(r'US\s*\d+', text, re.IGNORECASE):
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ User Story –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ h3: {text[:100]}...")
                    
                    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏
                    us_block_html = f"<div>{str(h3)}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    current = h3.next_sibling
                    while current:
                        if hasattr(current, 'name'):
                            if current.name in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']:
                                break
                            elif current.name == 'p':
                                us_block_html += str(current)
                        current = current.next_sibling
                    
                    us_block_html += "</div>"
                    us_block = BeautifulSoup(us_block_html, 'html.parser')
                    blocks.append(us_block)
                    logger.info(f"üîç –°–æ–∑–¥–∞–Ω –±–ª–æ–∫ User Story –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ h3")
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
        if not blocks:
            for tag in ['h1', 'h2', 'h4', 'h5', 'h6']:
                elements = section.find_all(tag)
                for element in elements:
                    text = element.get_text(strip=True)
                    if re.match(r'US\s*\d+', text, re.IGNORECASE):
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ User Story –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ {tag}: {text[:100]}...")
                        
                        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏
                        us_block_html = f"<div>{str(element)}"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        current = element.next_sibling
                        while current:
                            if hasattr(current, 'name'):
                                if current.name in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']:
                                    break
                                elif current.name == 'p':
                                    us_block_html += str(current)
                            current = current.next_sibling
                        
                        us_block_html += "</div>"
                        us_block = BeautifulSoup(us_block_html, 'html.parser')
                        blocks.append(us_block)
                        logger.info(f"üîç –°–æ–∑–¥–∞–Ω –±–ª–æ–∫ User Story –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ {tag}")
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(blocks)} –±–ª–æ–∫–æ–≤ User Stories –≤—Å–µ–≥–æ")
        return blocks
    
    def _extract_user_stories_from_table(self, table: BeautifulSoup) -> List[BeautifulSoup]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ User Stories –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–∏–µ–º–∫–∏"""
        blocks = []
        rows = table.find_all('tr')
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {len(rows)} —Å—Ç—Ä–æ–∫")
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º User Stories –≤ —è—á–µ–π–∫–∞—Ö —Å rowspan (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        logger.info("üîç –ü–æ–∏—Å–∫ User Stories –≤ —è—á–µ–π–∫–∞—Ö —Å rowspan...")
        cells_with_rowspan = table.find_all(['td', 'th'], rowspan=True)
        processed_rows = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        
        for cell in cells_with_rowspan:
            cell_text = cell.get_text(strip=True)
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —è—á–µ–π–∫—É —Å rowspan: {cell_text[:100]}...")
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ User Story
            user_story_patterns = [
                '—è, –∫–∞–∫', '—è –∫–∞–∫', '—è,–∫–∞–∫', '—è–∫–∞–∫',
                '–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–∫–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
                '–∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä', '–∫–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', '–∫–∞–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫',
                'user story', 'us ', 'us1', 'us2', 'us3', 'us4', 'us5'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±–æ–≥–æ –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            has_user_story_pattern = any(pattern in cell_text.lower() for pattern in user_story_patterns)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ User Story
            has_keywords = '—Ö–æ—á—É' in cell_text.lower() and '—á—Ç–æ–±—ã' in cell_text.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —è—á–µ–π–∫–∞ —Ç–µ–∫—Å—Ç User Story (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            has_user_story_text = '—Ö–æ—á—É' in cell_text.lower() and '—á—Ç–æ–±—ã' in cell_text.lower()
            
            # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —è—á–µ–π–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º User Story, –∞ –Ω–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            if has_user_story_text:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ User Story –≤ —è—á–µ–π–∫–µ —Å rowspan: {cell_text[:100]}...")
                logger.info(f"üîç –ü–∞—Ç—Ç–µ—Ä–Ω: {has_user_story_pattern}, –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {has_keywords}, –¢–µ–∫—Å—Ç User Story: {has_user_story_text}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã –µ—ë —É–∂–µ
                row = cell.find_parent('tr')
                if row and id(row) not in processed_rows:
                    processed_rows.add(id(row))
                    
                    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ User Story –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —è—á–µ–π–∫–µ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ —Å rowspan)
                    title_cell = None
                    all_cells = row.find_all(['td', 'th'])
                    cell_index = all_cells.index(cell)
                    if cell_index > 0:
                        title_cell = all_cells[cell_index - 1]
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ —è—á–µ–π–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {title_cell.get_text(strip=True)[:100]}...")
                    
                    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Å —è—á–µ–π–∫–æ–π User Story –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    us_cell_html = f"<div class='user-story-cell' data-rowspan='true'>{str(cell)}</div>"
                    if title_cell:
                        us_cell_html += f"<div class='user-story-title' data-rowspan='true'>{str(title_cell)}</div>"
                    
                    us_block = BeautifulSoup(us_cell_html, 'html.parser')
                    blocks.append(us_block)
                    logger.info(f"üîç –°–æ–∑–¥–∞–Ω –±–ª–æ–∫ User Story –∏–∑ —è—á–µ–π–∫–∏ —Å rowspan")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ rowspan —è—á–µ–π–∫–∞—Ö, –∏—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
        if not blocks:
            logger.info("üîç –ü–æ–∏—Å–∫ User Stories –≤ –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö...")
            us_rows = []
            for i, row in enumerate(rows):
                cells = row.find_all(['td', 'th'])
                if len(cells) >= 2:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ User Story
                    for cell in cells:
                        cell_text = cell.get_text(strip=True)
                        # –ò—â–µ–º "–Ø, –∫–∞–∫" –≤ —è—á–µ–π–∫–µ - —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ User Story
                        if '—è, –∫–∞–∫' in cell_text.lower() or '—è –∫–∞–∫' in cell_text.lower() or '—è,–∫–∞–∫' in cell_text.lower():
                            us_rows.append(i)
                            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ User Story –≤ —Å—Ç—Ä–æ–∫–µ {i}: {cell_text[:100]}...")
                            break
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(us_rows)} —Å—Ç—Ä–æ–∫ —Å User Stories: {us_rows}")
            
            # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π User Story —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–æ–∫–µ
            for i, us_row_index in enumerate(us_rows):
                # –ù–∞—Ö–æ–¥–∏–º —è—á–µ–π–∫—É —Å User Story
                us_row = rows[us_row_index]
                us_cells = us_row.find_all(['td', 'th'])
                
                # –ò—â–µ–º —è—á–µ–π–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º User Story
                us_cell = None
                for cell in us_cells:
                    cell_text = cell.get_text(strip=True)
                    if '—è, –∫–∞–∫' in cell_text.lower() or '—è –∫–∞–∫' in cell_text.lower() or '—è,–∫–∞–∫' in cell_text.lower():
                        us_cell = cell
                        break
                
                # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º —Å—Ç—Ä–æ–∫–∏
                us_row_html = f"<div class='user-story-row' data-row-index='{us_row_index}'>{str(us_row)}</div>"
                us_block = BeautifulSoup(us_row_html, 'html.parser')
                blocks.append(us_block)
                logger.info(f"üîç –°–æ–∑–¥–∞–Ω –±–ª–æ–∫ User Story {i+1} —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–∏–Ω–¥–µ–∫—Å: {us_row_index})")
        
        return blocks
    
    def _parse_single_user_story(self, block: BeautifulSoup, us_number: str, criteria_table: BeautifulSoup = None) -> Optional[UserStoryData]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–π User Story"""
        logger.info(f"üîç _parse_single_user_story –≤—ã–∑–≤–∞–Ω –¥–ª—è {us_number}")
        logger.info(f"üîç –ë–ª–æ–∫: {block.name}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {str(block)[:200]}...")
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ User Story
            user_story_text = self._extract_user_story_text(block)
            
            # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            if not self._is_valid_user_story(user_story_text):
                logger.warning(f"‚ùå –ë–ª–æ–∫ {us_number} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π User Story - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
                return None
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title = self._extract_title(block, us_number)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø—Ä–∏—ë–º–∫–∏
            logger.info(f"üîç –ë–ª–æ–∫ {us_number}: —Ç–∏–ø = {block.name}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ = {str(block)[:200]}...")
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
            table = None
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
            if criteria_table:
                table = criteria_table
                logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –¥–ª—è {us_number}")
            else:
                # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –±–ª–æ–∫–µ
                if block.name == 'table':
                    table = block
                else:
                    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
                    table = block.find('table')
                    if not table:
                        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–∏–µ–º–∫–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                        parent = block.parent
                        while parent and parent.name not in ['html', 'body', 'document']:
                            if parent.name == 'table' and self._table_contains_user_stories(parent):
                                table = parent
                                break
                            # –î–ª—è –±–ª–æ–∫–æ–≤ —Å rowspan —è—á–µ–π–∫–∞–º–∏ –∏—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ "–î–∞–Ω–æ", "–ö–æ–≥–¥–∞", "–¢–æ–≥–¥–∞"
                            if block.find('div', class_='user-story-cell'):
                                parent_tables = parent.find_all('table')
                                for candidate_table in parent_tables:
                                    header_row = candidate_table.find('tr')
                                    if header_row:
                                        headers = [cell.get_text(strip=True).lower() for cell in header_row.find_all(['th', 'td'])]
                                        if (any('–¥–∞–Ω–æ' in h for h in headers) and
                                            any('–∫–æ–≥–¥–∞' in h for h in headers) and
                                            any('—Ç–æ–≥–¥–∞' in h for h in headers)):
                                            table = candidate_table
                                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª–µ {parent.name}")
                                            break
                                if table:
                                    break
                            parent = parent.parent
            
            if table:
                logger.info(f"üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è {us_number}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ User Story –∏–∑ –±–ª–æ–∫–∞
                us_row_index = None
                us_row_div = block.find('div', class_='user-story-row')
                if us_row_div and us_row_div.get('data-row-index'):
                    us_row_index = int(us_row_div.get('data-row-index'))
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ User Story: {us_row_index}")
                
                # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–∑–≤–Ω–µ (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞),
                # –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä US –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ us_number (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'US1') –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–µ US
                if criteria_table:
                    m = re.search(r'(\d+)', us_number)
                    us_index_for_filter = int(m.group(1)) if m else None
                    logger.info(f"üîß –î–ª—è –≤–Ω–µ—à–Ω–µ–π —Ç–∞–±–ª–∏—Ü—ã –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä US –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {us_index_for_filter}")
                else:
                    # –î–ª—è –±–ª–æ–∫–æ–≤ —Å rowspan —è—á–µ–π–∫–∞–º–∏ –∏—â–µ–º –Ω–æ–º–µ—Ä US –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                    if block.find('div', class_='user-story-cell'):
                        title_text = self._extract_user_story_title(block)
                        if title_text:
                            m = re.search(r'US(\d+)', title_text, re.IGNORECASE)
                            if m:
                                us_index_for_filter = int(m.group(1))
                                logger.info(f"üîß –î–ª—è –±–ª–æ–∫–∞ —Å rowspan –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä US –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è: {us_index_for_filter}")
                            else:
                                us_index_for_filter = us_row_index
                                logger.info(f"üîß –î–ª—è –±–ª–æ–∫–∞ —Å rowspan –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏: {us_index_for_filter}")
                        else:
                            us_index_for_filter = us_row_index
                            logger.info(f"üîß –î–ª—è –±–ª–æ–∫–∞ —Å rowspan –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏: {us_index_for_filter}")
                    else:
                        us_index_for_filter = us_row_index
                        logger.info(f"üîß –î–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å US –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏: {us_index_for_filter}")
                acceptance_criteria, given_conditions, when_actions, then_results = self._extract_acceptance_criteria(table, us_index_for_filter)
            else:
                logger.warning(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {us_number}")
                # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                acceptance_criteria, given_conditions, when_actions, then_results = [], [], [], []
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HTML –≤ —Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            if isinstance(acceptance_criteria, str) and acceptance_criteria:
                # –ï—Å–ª–∏ —ç—Ç–æ HTML —Ç–∞–±–ª–∏—Ü–∞, —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
                criteria_list = [{"html": acceptance_criteria}]
            elif isinstance(acceptance_criteria, list):
                criteria_list = acceptance_criteria
            else:
                criteria_list = []
            
            logger.info(f"üîç –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏: {len(criteria_list)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
            description = self._format_description(user_story_text)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if not title or not user_story_text:
                logger.warning(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è User Story {us_number}: title='{title}', user_story_text='{user_story_text[:50] if user_story_text else 'None'}...'")
                return None
            
            logger.info(f"‚úÖ User Story {us_number} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {title}")
            
            return UserStoryData(
                title=title,
                description=description,
                acceptance_criteria=acceptance_criteria,
                user_story_text=user_story_text,
                us_number=us_number,
                given_conditions=given_conditions,
                when_actions=when_actions,
                then_results=then_results
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ User Story {us_number}: {str(e)}")
            return None
    
    def _extract_title(self, block: BeautifulSoup, us_number: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ User Story"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —è—á–µ–π–∫–∏ —Å –∫–ª–∞—Å—Å–æ–º user-story-title
        title = self._extract_user_story_title(block)
        if title:
            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç US –∏ –Ω–æ–º–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if re.match(r'US\s*\d+', title, re.IGNORECASE):
                return title
            # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Å –Ω–æ–º–µ—Ä–æ–º US
            return f"{us_number} {title}"
        
        # –ò—â–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç US1 –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        text = block.get_text()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ US1 "–ù–∞–∑–≤–∞–Ω–∏–µ"
        pattern = r'US\s*\d+\s*["""]([^"""]+)["""]'
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            title = match.group(1).strip()
            return title  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ - –∏—â–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ US1 –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        pattern2 = r'US\s*\d+\s*([^–Ø—è]+?)(?=–Ø,?\s*–∫–∞–∫|$)'
        match2 = re.search(pattern2, text, re.IGNORECASE | re.DOTALL)
        if match2:
            title = match2.group(1).strip()
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            title = re.sub(r'[^\w\s\-]', '', title).strip()
            if title and len(title) > 3:
                return title  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        
        # –ü–æ–∏—Å–∫ –≤ —è—á–µ–π–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ fallback
        cells = block.find_all(['td', 'th'])
        
        for i, cell in enumerate(cells):
            text = cell.get_text(strip=True)
            # –û—á–∏—â–∞–µ–º –æ—Ç HTML entities –∏ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            text = text.replace('&nbsp;', ' ').replace('\xa0', ' ')
            text = re.sub(r'\s+', ' ', text)
            
            # –ï—Å–ª–∏ —ç—Ç–æ —è—á–µ–π–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º US, –±–µ—Ä–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–π —è—á–µ–π–∫–∏
            if re.match(r'US\d+', text, re.IGNORECASE) and i + 1 < len(cells):
                next_cell_text = cells[i + 1].get_text(strip=True)
                # –û—á–∏—â–∞–µ–º –æ—Ç HTML entities –∏ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                next_cell_text = next_cell_text.replace('&nbsp;', ' ').replace('\xa0', ' ')
                next_cell_text = re.sub(r'\s+', ' ', next_cell_text)
                
                if next_cell_text and len(next_cell_text) > 3:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ User Story
                    # –ò—â–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É "–Ø, –∫–∞–∫" –∏ "—Ö–æ—á—É"
                    title_match = re.search(r'–Ø,?\s*–∫–∞–∫\s+([^,]+?),\s*—Ö–æ—á—É', next_cell_text, re.IGNORECASE)
                    if title_match:
                        title = title_match.group(1).strip()
                        return title
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –¥–æ "—Ö–æ—á—É"
                    title_match = re.search(r'^([^—Ö]+?)\s*—Ö–æ—á—É', next_cell_text, re.IGNORECASE)
                    if title_match:
                        title = title_match.group(1).strip()
                        # –£–±–∏—Ä–∞–µ–º "–Ø, –∫–∞–∫" –µ—Å–ª–∏ –µ—Å—Ç—å
                        title = re.sub(r'^—è,?\s*–∫–∞–∫\s*', '', title, flags=re.IGNORECASE).strip()
                        if title:
                            return title
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
                    return next_cell_text[:50] + "..." if len(next_cell_text) > 50 else next_cell_text
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —è—á–µ–π–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–µ US –Ω–æ–º–µ—Ä –∏ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã)
            elif (text and not text.startswith('US') and len(text) > 3 and 
                  not any(keyword in text.lower() for keyword in ['–Ω–∞–∑–≤–∞–Ω–∏–µ', 'user story', '–¥–∞–Ω–æ', '–∫–æ–≥–¥–∞', '—Ç–æ–≥–¥–∞'])):
                return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        
        return "User Story"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    
    def _is_valid_user_story(self, text: str) -> bool:
        """–°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–π User Story"""
        if not text or len(text.strip()) < 10:
            return False
        
        text_lower = text.lower()
        
        # –î–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–°–ï –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        # –ò—â–µ–º "—è, –∫–∞–∫" –∏–ª–∏ "—è –∫–∞–∫" –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Ç–µ–∫—Å—Ç–∞, –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ
        has_ya_kak = any(phrase in text_lower for phrase in ['—è, –∫–∞–∫', '—è –∫–∞–∫', '—è–∫–∞–∫', '—è –∫–∞–∫', '—è,–∫–∞–∫'])
        has_hocu = '—Ö–æ—á—É' in text_lower
        has_chtoby = '—á—Ç–æ–±—ã' in text_lower
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É User Story
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å "–Ø, –∫–∞–∫" –∏–ª–∏ "–Ø –∫–∞–∫"
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Å–ª–∞–±–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        starts_correctly = True  # text_lower.strip().startswith(('—è, –∫–∞–∫', '—è –∫–∞–∫'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        technical_keywords = [
            '–∫–æ–¥', '—Å–∏—Å—Ç–µ–º–∞', '–ø–æ–ª–µ', '–∫–æ–ª–æ–Ω–∫–∞', '—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
            'api', 'json', 'xml', '—Ñ–∞–π–ª', '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
            '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–∫–æ–¥', '—Ñ—É–Ω–∫—Ü–∏—è', '–º–µ—Ç–æ–¥'
        ]
        
        has_too_many_technical = sum(1 for keyword in technical_keywords if keyword in text_lower) > 10  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
        
        is_valid = has_ya_kak and has_hocu and has_chtoby and starts_correctly and not has_too_many_technical
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ User Story: ya_kak={has_ya_kak}, hocu={has_hocu}, chtoby={has_chtoby}, starts_correctly={starts_correctly}, not_technical={not has_too_many_technical}")
        
        return is_valid
    
    def _extract_user_story_from_cell(self, cell_text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞ User Story –∏–∑ —è—á–µ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        # –û—á–∏—â–∞–µ–º –æ—Ç HTML entities –∏ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        cell_text = cell_text.replace('&nbsp;', ' ').replace('\xa0', ' ')
        
        # –ó–∞–º–µ–Ω—è–µ–º HTML —Ç–µ–≥–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏
        cell_text = re.sub(r'</p>\s*<p[^>]*>', ' ', cell_text)
        cell_text = re.sub(r'<[^>]+>', '', cell_text)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ HTML —Ç–µ–≥–∏
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        cell_text = re.sub(r'\s+', ' ', cell_text).strip()
        
        # –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ User Story - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π
        patterns = [
            r'–Ø,?\s*–∫–∞–∫[^.]*—Ö–æ—á—É[^.]*—á—Ç–æ–±—ã[^.]*\.',
            r'–Ø,?\s*–∫–∞–∫[^.]*—Ö–æ—á—É[^.]*—á—Ç–æ–±—ã[^.]*',
            r'–ö–∞–∫[^.]*—Ö–æ—á—É[^.]*—á—Ç–æ–±—ã[^.]*\.',
            r'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å[^.]*—Ö–æ—á—É[^.]*—á—Ç–æ–±—ã[^.]*\.'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, cell_text, re.IGNORECASE | re.DOTALL)
            if match:
                result = match.group(0).strip()
                # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ HTML entities
                result = re.sub(r'\s+', ' ', result)
                result = result.replace('&nbsp;', ' ').replace('\xa0', ' ')
                return result
        
        # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "–Ø, –∫–∞–∫"
        sentences = re.split(r'[.!?]', cell_text)
        for sentence in sentences:
            sentence = sentence.strip()
            if re.match(r'^—è,?\s*–∫–∞–∫', sentence, re.IGNORECASE):
                # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ HTML entities
                result = re.sub(r'\s+', ' ', sentence)
                result = result.replace('&nbsp;', ' ').replace('\xa0', ' ')
                return result
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        return ""
    
    def _extract_user_story_title(self, block: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è User Story –∏–∑ –±–ª–æ–∫–∞"""
        # –ï—Å–ª–∏ –±–ª–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —è—á–µ–π–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ
        if block.find('div', class_='user-story-title'):
            title_cell = block.find('div', class_='user-story-title').find(['td', 'th'])
            if title_cell:
                title_text = title_cell.get_text(strip=True)
                # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
                title_text = re.sub(r'<[^>]+>', '', title_text)
                title_text = re.sub(r'\s+', ' ', title_text).strip()
                # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                title_text = re.sub(r'^["""]+|["""]+$', '', title_text).strip()
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É US –∏ –Ω–æ–º–µ—Ä–æ–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                title_text = re.sub(r'US(\d+)', r'US\1 ', title_text)
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ User Story: {title_text[:100]}...")
                return title_text
        
        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        return ""
    
    def _extract_user_story_text(self, block: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ User Story –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–Ø, –∫–∞–∫... —Ö–æ—á—É... —á—Ç–æ–±—ã...'"""
        logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ User Story –∏–∑ –±–ª–æ–∫–∞: {block.name}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞, –∏—â–µ–º User Story –≤ —è—á–µ–π–∫–∞—Ö —Å rowspan
        if block.name == 'table':
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —è—á–µ–π–∫–∞—Ö —Å rowspan (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            cells_with_rowspan = block.find_all(['td', 'th'], rowspan=True)
            for cell in cells_with_rowspan:
                cell_text = cell.get_text().lower()
                if any(keyword in cell_text for keyword in ['—è, –∫–∞–∫', '—è –∫–∞–∫', '—Ö–æ—á—É', '—á—Ç–æ–±—ã']):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç User Story –∏–∑ —ç—Ç–æ–π —è—á–µ–π–∫–∏
                    user_story_text = self._extract_user_story_from_cell(cell.get_text())
                    if user_story_text:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ User Story –≤ —è—á–µ–π–∫–µ —Å rowspan: {user_story_text[:100]}...")
                        return user_story_text
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ rowspan —è—á–µ–π–∫–∞—Ö, –∏—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö
            all_cells = block.find_all(['td', 'th'])
            for cell in all_cells:
                cell_text = cell.get_text().lower()
                if any(keyword in cell_text for keyword in ['—è, –∫–∞–∫', '—è –∫–∞–∫', '—Ö–æ—á—É', '—á—Ç–æ–±—ã']):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç User Story –∏–∑ —ç—Ç–æ–π —è—á–µ–π–∫–∏
                    user_story_text = self._extract_user_story_from_cell(cell.get_text())
                    if user_story_text:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ User Story –≤ —è—á–µ–π–∫–µ: {user_story_text[:100]}...")
                        return user_story_text
        
        # –ï—Å–ª–∏ –±–ª–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —è—á–µ–π–∫—É —Å rowspan, –∏–∑–≤–ª–µ–∫–∞–µ–º User Story –∏–∑ –Ω–µ—ë
        if block.find('div', class_='user-story-cell'):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º User Story –∏–∑ —è—á–µ–π–∫–∏ —Å rowspan
            cell = block.find('div', class_='user-story-cell').find(['td', 'th'])
            if cell:
                user_story_text = self._extract_user_story_from_cell(cell.get_text())
                if user_story_text:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ User Story –≤ —è—á–µ–π–∫–µ —Å rowspan: {user_story_text[:100]}...")
                    return user_story_text
        
        # –ï—Å–ª–∏ –±–ª–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã, –∏—â–µ–º —è—á–µ–π–∫—É —Å User Story
        if block.find('div', class_='user-story-row'):
            # –ò—â–µ–º —è—á–µ–π–∫—É —Å User Story –≤–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–µ (–∏–Ω–¥–µ–∫—Å 1)
            cells = block.find_all(['td', 'th'])
            if len(cells) >= 2:
                user_story_cell = cells[1]  # –í—Ç–æ—Ä–∞—è —è—á–µ–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç User Story
                user_story_text = self._extract_user_story_from_cell(user_story_cell.get_text())
                if user_story_text:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ User Story –≤ —è—á–µ–π–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {user_story_text[:100]}...")
                    return user_story_text
        
        # –ï—Å–ª–∏ –Ω–µ —Ç–∞–±–ª–∏—Ü–∞, –ø–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        text = block.get_text()
        logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ User Story –∏–∑: {text[:100]}...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —è—á–µ–π–∫–∏
        user_story_text = self._extract_user_story_from_cell(text)
        if user_story_text:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç User Story: {user_story_text}")
            return user_story_text
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        logger.warning(f"‚ö†Ô∏è –ü–∞—Ç—Ç–µ—Ä–Ω User Story –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ: {text[:50]}...")
        return ""
    
    def _extract_acceptance_criteria(self, block: BeautifulSoup, us_row_index: int = None) -> Tuple[List[Dict[str, str]], str, str, str]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø—Ä–∏—ë–º–∫–∏: —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –î–∞–Ω–æ, –ö–æ–≥–¥–∞, –¢–æ–≥–¥–∞
        """
        logger.info(f"üîç –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø—Ä–∏—ë–º–∫–∏ –≤ –±–ª–æ–∫–µ...")
        import uuid
        debug_uuid = str(uuid.uuid4())[:8]
        logger.info(f"üÜî[{debug_uuid}] –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤")

        def select_acceptance_table(tables, source_label):
            for idx, candidate in enumerate(tables, start=1):
                header_row = candidate.find('tr')
                if not header_row:
                    continue
                headers = [cell.get_text(strip=True).lower() for cell in header_row.find_all(['th', 'td'])]
                logger.info(f"   üîñ[{debug_uuid}] {source_label} —Ç–∞–±–ª–∏—Ü–∞ {idx}: –∑–∞–≥–æ–ª–æ–≤–∫–∏ {headers}")
                if (any('–¥–∞–Ω–æ' in h for h in headers) and
                    any('–∫–æ–≥–¥–∞' in h for h in headers) and
                    any('—Ç–æ–≥–¥–∞' in h for h in headers)):
                    logger.info(f"‚úÖ[{debug_uuid}] –í—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {idx} –∏–∑ {source_label} –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º")
                    return candidate
            return None

        table = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∞–º –±–ª–æ–∫ —Ç–∞–±–ª–∏—Ü–µ–π
        if block.name == 'table':
            table = select_acceptance_table([block], '–±–ª–æ–∫–∞')
        else:
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
            tables_in_block = block.find_all('table')
            logger.info(f"üÜî[{debug_uuid}] –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–ª–æ–∫–µ: {block.name}")
            logger.info(f"üÜî[{debug_uuid}] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞: {str(block)[:200]}...")
            if tables_in_block:
                logger.info(f"üÜî[{debug_uuid}] –ù–∞–π–¥–µ–Ω–æ {len(tables_in_block)} —Ç–∞–±–ª–∏—Ü –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞")
                table = select_acceptance_table(tables_in_block, '–±–ª–æ–∫–∞')

        if not table:
            # –∏—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—è—Ö
            parent = block.parent
            while parent and parent.name not in ['html', 'body', 'document']:
                parent_tables = parent.find_all('table')
                if parent_tables:
                    logger.info(f"üÜî[{debug_uuid}] –í —Ä–æ–¥–∏—Ç–µ–ª–µ {parent.name} –Ω–∞–π–¥–µ–Ω–æ {len(parent_tables)} —Ç–∞–±–ª–∏—Ü")
                    table = select_acceptance_table(parent_tables, f'—Ä–æ–¥–∏—Ç–µ–ª—è {parent.name}')
                    if table:
                        break
                parent = parent.parent

        if not table:
            # –∏—â–µ–º –≤–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
            root = block
            while root.parent:
                root = root.parent
            all_tables = root.find_all('table')
            logger.info(f"üîç[{debug_uuid}] –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {len(all_tables)}")
            table = select_acceptance_table(all_tables, '–¥–æ–∫—É–º–µ–Ω—Ç–∞')

        if table:
            table_preview = str(table)[:500].replace('\n', ' ')
            logger.info(f"üìÑ[{debug_uuid}] –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–æ–±—Ä–µ–∑–∞–Ω–æ): {table_preview}...")
            # 1. –ù–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            header_row = table.find('tr')
            if not header_row:
                logger.warning(f"‚ö†Ô∏è[{debug_uuid}] –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return [], '', '', ''
            
            headers = [th.get_text(strip=True) for th in header_row.find_all(['th', 'td'])]
            # –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç HTML entities –∏ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            headers = [h.replace('&nbsp;', ' ').replace('\xa0', ' ') for h in headers]
            headers = [re.sub(r'\s+', ' ', h) for h in headers]
            headers_lower = [h.lower() for h in headers]
            headers_compact = [re.sub(r'[\s_\-\.]+', '', h.lower()) for h in headers]
            logger.info(f"üîñ[{debug_uuid}] –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
            logger.info(f"üîñ[{debug_uuid}] –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ: {headers_lower}")
            
            dano_idx = next((i for i, h in enumerate(headers_lower) if '–¥–∞–Ω–æ' in h), None)
            kogda_idx = next((i for i, h in enumerate(headers_lower) if '–∫–æ–≥–¥–∞' in h), None)
            togda_idx = next((i for i, h in enumerate(headers_lower) if '—Ç–æ–≥–¥–∞' in h), None)
            # –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ US: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
            us_col_idx = None
            header_us_candidates = []
            for i, compact in enumerate(headers_compact):
                # –Ø–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: 'us', 'userstory', –∞ —Ç–∞–∫–∂–µ '–Ω–∞–∑–≤–∞–Ω–∏–µus'
                if compact == 'us' or 'userstory' in compact or '–Ω–∞–∑–≤–∞–Ω–∏–µus' in compact:
                    header_us_candidates.append(i)
            if header_us_candidates:
                us_col_idx = header_us_candidates[0]
                logger.info(f"üìå[{debug_uuid}] –ö–∞–Ω–¥–∏–¥–∞—Ç—ã US-–∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º: {header_us_candidates}; –≤—ã–±—Ä–∞–Ω {us_col_idx} ('{headers[us_col_idx]}')")
            logger.info(f"üìå[{debug_uuid}] –ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ - –î–∞–Ω–æ: {dano_idx}, –ö–æ–≥–¥–∞: {kogda_idx}, –¢–æ–≥–¥–∞: {togda_idx}")
            
            if None in (dano_idx, kogda_idx, togda_idx):
                logger.warning(f"‚ö†Ô∏è[{debug_uuid}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –î–∞–Ω–æ/–ö–æ–≥–¥–∞/–¢–æ–≥–¥–∞")
                logger.warning(f"‚ö†Ô∏è[{debug_uuid}] –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º...")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º
                for i, h in enumerate(headers_lower):
                    if '–¥–∞–Ω–æ' in h or 'given' in h:
                        dano_idx = i
                        logger.info(f"‚úÖ[{debug_uuid}] –ù–∞–π–¥–µ–Ω '–î–∞–Ω–æ' –≤ –∫–æ–ª–æ–Ω–∫–µ {i}: '{h}'")
                    if '–∫–æ–≥–¥–∞' in h or 'when' in h:
                        kogda_idx = i
                        logger.info(f"‚úÖ[{debug_uuid}] –ù–∞–π–¥–µ–Ω '–ö–æ–≥–¥–∞' –≤ –∫–æ–ª–æ–Ω–∫–µ {i}: '{h}'")
                    if '—Ç–æ–≥–¥–∞' in h or 'then' in h:
                        togda_idx = i
                        logger.info(f"‚úÖ[{debug_uuid}] –ù–∞–π–¥–µ–Ω '–¢–æ–≥–¥–∞' –≤ –∫–æ–ª–æ–Ω–∫–µ {i}: '{h}'")
                
                if None in (dano_idx, kogda_idx, togda_idx):
                    logger.warning(f"‚ö†Ô∏è[{debug_uuid}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–∞–∂–µ –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º")
                    return [], '', '', ''
            # 2. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –∑–Ω–∞—á–µ–Ω–∏–π —Å —É—á—ë—Ç–æ–º rowspan/colspan
            matrix = []
            rowspans = {}
            data_rows = table.find_all('tr')[1:]
            logger.info(f"üî¢[{debug_uuid}] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞): {len(data_rows)}")
            for tr_idx, tr in enumerate(data_rows):
                row = []
                cells = tr.find_all(['td', 'th'])
                logger.info(f"   ‚û°Ô∏è[{debug_uuid}] –°—Ç—Ä–æ–∫–∞ {tr_idx + 1}: –≤—Å–µ–≥–æ —è—á–µ–µ–∫ = {len(cells)}")
                col = 0
                i = 0
                while col < len(headers):
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–π rowspan –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç—Ä–æ–∫
                    if (tr_idx, col) in rowspans:
                        value = rowspans[(tr_idx, col)]
                        row.append(value)
                        logger.debug(f"      ‚Ü™Ô∏è[{debug_uuid}] –ü—Ä–∏–º–µ–Ω—ë–Ω rowspan –∑–Ω–∞—á–µ–Ω–∏–µ '{value}' –≤ –∫–æ–ª–æ–Ω–∫–µ {col}")
                        col += 1
                        continue
                    if i >= len(cells):
                        row.append("")
                        col += 1
                        continue
                    cell = cells[i]
                    text = cell.get_text(separator=' ', strip=True)
                    # –û—á–∏—â–∞–µ–º –æ—Ç HTML entities –∏ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                    text = text.replace('&nbsp;', ' ').replace('\xa0', ' ')
                    text = re.sub(r'\s+', ' ', text)
                    rowspan = int(cell.get('rowspan', 1))
                    colspan = int(cell.get('colspan', 1))
                    logger.debug(f"      ‚¨ú[{debug_uuid}] –Ø—á–µ–π–∫–∞ {i}: text='{text[:50]}...', rowspan={rowspan}, colspan={colspan}, —Ç–µ–∫—É—â–∞—è –∫–æ–ª–æ–Ω–∫–∞={col}")
                    for c in range(colspan):
                        row.append(text)
                        if rowspan > 1:
                            for r in range(1, rowspan):
                                rowspans[(tr_idx + r, col)] = text
                                logger.debug(f"         ‚ÜòÔ∏è[{debug_uuid}] –°–æ—Ö—Ä–∞–Ω—ë–Ω rowspan –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {tr_idx + r + 1}, –∫–æ–ª–æ–Ω–∫–∏ {col}")
                        col += 1
                    i += 1
                logger.info(f"   ‚úÖ[{debug_uuid}] –°—Ç—Ä–æ–∫–∞ {tr_idx + 1} –ø–æ—Å–ª–µ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è: {row}")
                matrix.append(row)
            
            # 3. –°–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            logger.info(f"üî¢[{debug_uuid}] –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞: {len(matrix)} —Å—Ç—Ä–æ–∫")
            # –£—Ç–æ—á–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫—É US –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–µ—Å–ª–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ)
            if len(matrix) > 0:
                best_col = None
                best_count = -1
                def _norm_us(cell_val: str) -> str:
                    s = str(cell_val).strip()
                    s = s.replace('\xa0', ' ')
                    s = re.sub(r'\s+', ' ', s)
                    return s
                for i in range(len(headers)):
                    count = 0
                    for r in range(len(matrix)):
                        cell = matrix[r][i] if i < len(matrix[r]) else ''
                        val = _norm_us(cell)
                        # –ò—â–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤–∏–¥–∞ 'US\d+'
                        if re.match(r'\s*US\s*\d+', val, flags=re.IGNORECASE):
                            count += 1
                    if count > best_count:
                        best_count = count
                        best_col = i
                logger.info(f"üî¨[{debug_uuid}] –õ—É—á—à–∞—è US-–∫–æ–ª–æ–Ω–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º: {best_col} ('{headers[best_col] if best_col is not None else '?'}'), —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {best_count}")
                if best_count > 0 and (us_col_idx is None or (best_col is not None and best_col not in (header_us_candidates or []))):
                    us_col_idx = best_col
                    logger.info(f"‚úÖ[{debug_uuid}] US-–∫–æ–ª–æ–Ω–∫–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –¥–∞–Ω–Ω—ã–º: –∏–Ω–¥–µ–∫—Å {us_col_idx} ('{headers[us_col_idx]}')")
                elif us_col_idx is not None:
                    logger.info(f"‚ÑπÔ∏è[{debug_uuid}] –û—Å—Ç–∞–≤–ª—è–µ–º US-–∫–æ–ª–æ–Ω–∫—É –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: –∏–Ω–¥–µ–∫—Å {us_col_idx} ('{headers[us_col_idx]}')")
                else:
                    logger.info(f"‚ÑπÔ∏è[{debug_uuid}] –ö–æ–ª–æ–Ω–∫–∞ US –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")

            rows = []

            # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            def normalize_us_value(value: str) -> str:
                if value is None:
                    return ''
                s = str(value).strip().lower()
                s = s.replace('\xa0', ' ')
                s = re.sub(r'[\s_\-]+', '', s)
                s = s.replace('userstory', 'us')
                m = re.search(r'us?(\d+)', s)
                if m:
                    return f"us{m.group(1)}"
                return s

            def extract_vals_from_row(row_list):
                return [
                    row_list[dano_idx] if dano_idx is not None and dano_idx < len(row_list) else "",
                    row_list[kogda_idx] if kogda_idx is not None and kogda_idx < len(row_list) else "",
                    row_list[togda_idx] if togda_idx is not None and togda_idx < len(row_list) else "",
                ]
            
            if us_col_idx is not None and us_row_index is not None:
                # –†–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–µ US: fill-down –∏ –æ—Ç–±–æ—Ä —Å—Ç—Ä–æ–∫ —Ç–µ–∫—É—â–µ–π US
                logger.info(f"üîç[{debug_uuid}] –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω US-—Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–æ–Ω–∫–µ {us_col_idx} –¥–ª—è us_row_index={us_row_index}")
                filled_us_vals = []
                current_us = ''
                for r in range(len(matrix)):
                    cell_val = matrix[r][us_col_idx] if us_col_idx < len(matrix[r]) else ''
                    cell_val = cell_val.strip()
                    if cell_val:
                        current_us = cell_val
                    filled_us_vals.append(current_us)
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: —Å—Ç—Ä–æ–≥–æ us{N} –∏ N
                candidates_raw = [f"us{us_row_index}", str(us_row_index)]
                candidate_norms = {normalize_us_value(c) for c in candidates_raw}
                logger.info(f"üéØ[{debug_uuid}] –¶–µ–ª–µ–≤—ã–µ US-–º–∞—Ä–∫–µ—Ä—ã: {sorted(candidate_norms)}")
                for row_idx, row in enumerate(matrix):
                    us_val_norm = normalize_us_value(filled_us_vals[row_idx])
                    if us_val_norm and us_val_norm in candidate_norms:
                        vals = extract_vals_from_row(row)
                        logger.info(f"   üìé[{debug_uuid}] –°—Ç—Ä–æ–∫–∞ {row_idx + 1} –æ—Ç–æ–±—Ä–∞–Ω–∞ –ø–æ US='{filled_us_vals[row_idx]}' ‚Üí {vals}")
                        if any(val.strip() for val in vals):
                            rows.append(vals)
                    else:
                        logger.debug(f"   ‚è≠Ô∏è[{debug_uuid}] –°—Ç—Ä–æ–∫–∞ {row_idx + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ US: '{filled_us_vals[row_idx]}' ({us_val_norm})")
                if not rows:
                    logger.warning(f"‚ö†Ô∏è[{debug_uuid}] US-—Ñ–∏–ª—å—Ç—Ä –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–±—â–∏–π —Ä–µ–∂–∏–º")
            elif us_col_idx is not None and us_row_index is None:
                # –ï—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ US, –Ω–æ –∏–Ω–¥–µ–∫—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Üí —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: –±–µ—Ä—ë–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
                logger.info(f"‚ÑπÔ∏è[{debug_uuid}] –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ US (–∏–Ω–¥–µ–∫—Å {us_col_idx}), –Ω–æ us_row_index –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞")
                for row_idx, row in enumerate(matrix, start=1):
                    vals = extract_vals_from_row(row)
                    if any(val.strip() for val in vals):
                        rows.append(vals)
                        logger.info(f"   ‚úÖ[{debug_uuid}] –°—Ç—Ä–æ–∫–∞ {row_idx} –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞)")
            elif us_row_index is not None:
                # us_row_index - —ç—Ç–æ –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π HTML —Ç–∞–±–ª–∏—Ü–µ (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)
                # matrix - —ç—Ç–æ –º–∞—Ç—Ä–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –≤—ã—á–µ—Å—Ç—å 1
                matrix_row_index = us_row_index - 1
                logger.info(f"üîç[{debug_uuid}] –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è US —Å—Ç—Ä–æ–∫–∏ {us_row_index} (–∏–Ω–¥–µ–∫—Å –≤ –º–∞—Ç—Ä–∏—Ü–µ: {matrix_row_index})")
                
                if matrix_row_index < 0 or matrix_row_index >= len(matrix):
                    logger.warning(f"‚ö†Ô∏è[{debug_uuid}] –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ US {matrix_row_index} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—Ä–∏—Ü—ã {len(matrix)}")
                    return [], '', '', ''
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —ç—Ç–æ–π User Story
                # –û–±—ã—á–Ω–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ User Story –¥–æ —Å–ª–µ–¥—É—é—â–µ–π User Story
                us_start_row = matrix_row_index
                us_end_row = len(matrix)
                
                # –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é User Story –≤ –º–∞—Ç—Ä–∏—Ü–µ
                for row_idx in range(matrix_row_index + 1, len(matrix)):
                    row = matrix[row_idx]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–æ–≤–æ–π User Story
                    # –ò—â–µ–º "—è, –∫–∞–∫" –∏–ª–∏ "—è –∫–∞–∫" –≤ –ª—é–±–æ–π –∏–∑ –∫–æ–ª–æ–Ω–æ–∫
                    row_text = ' '.join(str(cell) for cell in row).lower()
                    if '—è, –∫–∞–∫' in row_text or '—è –∫–∞–∫' in row_text or '—è,–∫–∞–∫' in row_text:
                        us_end_row = row_idx
                        logger.info(f"üîç[{debug_uuid}] –ù–∞–π–¥–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è US –≤ —Å—Ç—Ä–æ–∫–µ {row_idx + 1}, –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–æ —Å—Ç—Ä–æ–∫–∏ {us_end_row}")
                        break
                
                logger.info(f"üîç[{debug_uuid}] –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è US {us_row_index}: —Å—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã {us_start_row + 1} - {us_end_row}")
                
                # –ë–µ—Ä–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç US —Å—Ç—Ä–æ–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π US (–∏—Å–∫–ª—é—á–∞—è —Å–∞–º—É US —Å—Ç—Ä–æ–∫—É)
                for row_idx in range(us_start_row + 1, us_end_row):
                    if row_idx < len(matrix):
                        row = matrix[row_idx]
                        vals = extract_vals_from_row(row)
                        logger.info(f"   üìé[{debug_uuid}] –°—Ç—Ä–æ–∫–∞ {row_idx + 1} (–î–∞–Ω–æ/–ö–æ–≥–¥–∞/–¢–æ–≥–¥–∞): {vals}")
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è (–Ω–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ)
                        if any(val.strip() for val in vals):
                            rows.append(vals)
                            logger.info(f"   ‚úÖ[{debug_uuid}] –°—Ç—Ä–æ–∫–∞ {row_idx + 1} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫—Ä–∏—Ç–µ—Ä–∏–∏")
                        else:
                            logger.info(f"   ‚ùå[{debug_uuid}] –°—Ç—Ä–æ–∫–∞ {row_idx + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–ø—É—Å—Ç–∞—è)")
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ US
                if not rows:
                    logger.warning(f"‚ö†Ô∏è[{debug_uuid}] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è US {us_row_index}, –±–µ—Ä–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ US")
                    for row_idx in range(us_start_row + 1, len(matrix)):
                        row = matrix[row_idx]
                        vals = extract_vals_from_row(row)
                        if any(val.strip() for val in vals):
                            rows.append(vals)
                            logger.info(f"   ‚úÖ[{debug_uuid}] –°—Ç—Ä–æ–∫–∞ {row_idx + 1} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (fallback)")
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ User Story, –±–µ—Ä–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
                logger.info(f"üîç[{debug_uuid}] –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ US –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏")
                for row_idx, row in enumerate(matrix, start=1):
                    vals = extract_vals_from_row(row)
                    if any(val.strip() for val in vals):
                        rows.append(vals)
                        logger.info(f"   ‚úÖ[{debug_uuid}] –°—Ç—Ä–æ–∫–∞ {row_idx} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (–≤—Å–µ —Å—Ç—Ä–æ–∫–∏)")
            
            logger.info(f"üìà[{debug_uuid}] –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ: {len(rows)}")
            # 4. –°–æ–±—Ä–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            html = [
                '<table border="1" cellpadding="5" cellspacing="0" style="border-collapse:collapse;width:100%;">',
                '<tr style="background-color:#f0f0f0;"><th style="border:1px solid #000;">–î–∞–Ω–æ</th><th style="border:1px solid #000;">–ö–æ–≥–¥–∞</th><th style="border:1px solid #000;">–¢–æ–≥–¥–∞</th></tr>'
            ]
            for row in rows:
                html.append('<tr>' + ''.join(f'<td style="border:1px solid #000;">{cell}</td>' for cell in row) + '</tr>')
            html.append('</table>')
            result_html = ''.join(html)
            logger.info(f"‚úÖ[{debug_uuid}] –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–æ–±—Ä–µ–∑–∞–Ω–æ): {result_html[:500]}...")
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Given, When, Then –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            given_conditions = "\n".join([r[0] for r in rows if r[0]])
            when_actions = "\n".join([r[1] for r in rows if r[1]])
            then_results = "\n".join([r[2] for r in rows if r[2]])
            
            return [{"html": result_html}], given_conditions, when_actions, then_results
        # –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        text = block.get_text()
        logger.info(f"üîç[{debug_uuid}] –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {text[:200]}...")
        criteria_patterns = [
            r'–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏\s*\n(.+?)(?=\n\s*\n|\nTDD|$)',
            r'–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏\s*\n(.+?)(?=\n\s*\n|\nTDD|$)',
            r'–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏\s*:?\s*\n(.+?)(?=\n\s*\n|\nTDD|$)',
            r'–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏\s*:?\s*\n(.+?)(?=\n\s*\n|\nTDD|$)'
        ]
        for pattern in criteria_patterns:
            match = re.search(pattern, text, re.IGNORECASE | re.DOTALL)
            if match:
                logger.info(f"‚úÖ[{debug_uuid}] –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø—Ä–∏—ë–º–∫–∏")
                criteria_text = match.group(1).strip()
                return [], criteria_text, '', ''
        logger.info(f"‚ùå[{debug_uuid}] –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return [], '', '', ''
    
    def _format_description(self, user_story_text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è User Story"""
        if not user_story_text:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        formatted = user_story_text.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–¥ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        formatted = re.sub(r'(—è,?\s*–∫–∞–∫|—Ö–æ—á—É|—á—Ç–æ–±—ã)', r'\n\1', formatted, flags=re.IGNORECASE)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ
        formatted = formatted.lstrip('\n')
        
        return formatted
    
    def _create_preview(self, page_data: ConfluencePageData) -> Dict[str, Any]:
        logger.info(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ preview –¥–ª—è {len(page_data.user_stories)} User Stories")
        team = page_data.team or "Foxtrot"
        area_path = f"Houston\\{team}"
        iteration_path = f"Houston\\{team}"
        preview = {
            "confluence_url": page_data.url,
            "article_title": page_data.title,
            "project": page_data.project,
            "parent_ticket": page_data.tfs_number,
            "wiki_link": page_data.url,
            "user_stories_count": len(page_data.user_stories),
            "team": team,
            "area_path": area_path,
            "iteration_path": iteration_path,
            "user_stories": []
        }
        for i, us in enumerate(page_data.user_stories):
            logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ US {i+1}: title='{us.title}', user_story_text='{us.user_story_text[:50] if us.user_story_text else 'None'}...'")
            logger.info(f"üîç given_conditions: '{us.given_conditions[:100] if us.given_conditions else 'None'}...'")
            logger.info(f"üîç acceptance_criteria: {us.acceptance_criteria}")
            # –ï—Å–ª–∏ acceptance_criteria —Å–æ–¥–µ—Ä–∂–∏—Ç HTML —Ç–∞–±–ª–∏—Ü—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            acceptance_criteria = []
            if us.acceptance_criteria:
                if isinstance(us.acceptance_criteria, list) and len(us.acceptance_criteria) > 0:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å HTML
                    if isinstance(us.acceptance_criteria[0], dict) and 'html' in us.acceptance_criteria[0]:
                        acceptance_criteria = [us.acceptance_criteria[0]['html']]
                        logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ç–∞–±–ª–∏—Ü—É –∏–∑ acceptance_criteria[0]['html']")
                    else:
                        acceptance_criteria = [str(item) for item in us.acceptance_criteria]
                        logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º acceptance_criteria –∫–∞–∫ —Å–ø–∏—Å–æ–∫")
                elif isinstance(us.acceptance_criteria, str) and us.acceptance_criteria.strip().startswith('<table'):
                    acceptance_criteria = [us.acceptance_criteria]
                    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ç–∞–±–ª–∏—Ü—É –∏–∑ acceptance_criteria")
                else:
                    acceptance_criteria = [str(us.acceptance_criteria)]
                    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º acceptance_criteria –∫–∞–∫ —Å—Ç—Ä–æ–∫—É")
            elif us.given_conditions and us.given_conditions.strip().startswith('<table'):
                acceptance_criteria = [us.given_conditions]
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ç–∞–±–ª–∏—Ü—É –∏–∑ given_conditions")
            elif us.given_conditions:
                acceptance_criteria = [us.given_conditions]
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º given_conditions –∫–∞–∫ —Ç–µ–∫—Å—Ç")
            else:
                acceptance_criteria = []
                logger.warning("‚ö†Ô∏è –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            us_preview = {
                "title": us.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                "description": us.user_story_text or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                "acceptance_criteria": acceptance_criteria,
                "us_number": f"US{i+1}",
                "given_conditions": us.given_conditions or "",
                "when_actions": us.when_actions or "",
                "then_results": us.then_results or ""
            }
            preview["user_stories"].append(us_preview)
        logger.info(f"‚úÖ Preview —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å {len(preview['user_stories'])} User Stories")
        return preview
    
    def _is_confirmation_positive(self, confirmation: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        positive_keywords = ['–¥–∞', '—Å–æ–∑–¥–∞—Ç—å', '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'yes', 'create', 'confirm']
        negative_keywords = ['–Ω–µ—Ç', '–æ—Ç–º–µ–Ω–∞', '–Ω–µ–≤–µ—Ä–Ω–æ', '–æ—Ç–º–µ–Ω–∏—Ç—å', 'no', 'cancel', 'wrong']
        
        confirmation_lower = confirmation.lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for keyword in positive_keywords:
            if keyword in confirmation_lower:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for keyword in negative_keywords:
            if keyword in confirmation_lower:
                return False
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö, –Ω–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤,
        # —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return True
        
    def _extract_table_columns(self, table: BeautifulSoup) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø—Ä–∏–µ–º–∫–∏"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            headers = [th.get_text(strip=True) for th in table.find_all("th")]
            logger.info(f"üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {headers}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            index_dano = None
            index_kogda = None
            index_togda = None
            
            for i, header in enumerate(headers):
                if '–¥–∞–Ω–æ' in header.lower():
                    index_dano = i
                elif '–∫–æ–≥–¥–∞' in header.lower():
                    index_kogda = i
                elif '—Ç–æ–≥–¥–∞' in header.lower():
                    index_togda = i
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (3, 4, 5 –∫–æ–ª–æ–Ω–∫–∏)
            if index_dano is None or index_kogda is None or index_togda is None:
                logger.info("üîç –ö–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã")
                index_dano = 2  # 3-—è –∫–æ–ª–æ–Ω–∫–∞ (–∏–Ω–¥–µ–∫—Å 2)
                index_kogda = 3  # 4-—è –∫–æ–ª–æ–Ω–∫–∞ (–∏–Ω–¥–µ–∫—Å 3)
                index_togda = 4  # 5-—è –∫–æ–ª–æ–Ω–∫–∞ (–∏–Ω–¥–µ–∫—Å 4)
            
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫: –î–∞–Ω–æ={index_dano}, –ö–æ–≥–¥–∞={index_kogda}, –¢–æ–≥–¥–∞={index_togda}")
            
            given_data = []
            when_data = []
            then_data = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            for tr in table.find_all("tr")[1:]:
                cells = tr.find_all(["td", "th"])
                logger.info(f"üîç –°—Ç—Ä–æ–∫–∞: {len(cells)} —è—á–µ–µ–∫")
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å —É—á–µ—Ç–æ–º rowspan
                # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –º–µ–Ω—å—à–µ —è—á–µ–µ–∫, —á–µ–º –æ–∂–∏–¥–∞–µ—Ç—Å—è, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —è—á–µ–π–∫–∏ –∏–º–µ—é—Ç rowspan
                actual_index_dano = index_dano
                actual_index_kogda = index_kogda
                actual_index_togda = index_togda
                
                # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —è—á–µ–µ–∫ —Å rowspan –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç—Ä–æ–∫ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã
                if len(cells) < 5:  # –û–∂–∏–¥–∞–µ–º 5 –∫–æ–ª–æ–Ω–æ–∫
                    missing_cells = 5 - len(cells)
                    actual_index_dano = max(0, index_dano - missing_cells)
                    actual_index_kogda = max(0, index_kogda - missing_cells)
                    actual_index_togda = max(0, index_togda - missing_cells)
                    logger.info(f"üîç –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤: missing={missing_cells}, –î–∞–Ω–æ={actual_index_dano}, –ö–æ–≥–¥–∞={actual_index_kogda}, –¢–æ–≥–¥–∞={actual_index_togda}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º
                if len(cells) > max(actual_index_dano, actual_index_kogda, actual_index_togda):
                    given_text = cells[actual_index_dano].get_text(strip=True) if actual_index_dano < len(cells) else ""
                    when_text = cells[actual_index_kogda].get_text(strip=True) if actual_index_kogda < len(cells) else ""
                    then_text = cells[actual_index_togda].get_text(strip=True) if actual_index_togda < len(cells) else ""
                    
                    logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ: –î–∞–Ω–æ='{given_text[:50]}...', –ö–æ–≥–¥–∞='{when_text[:50]}...', –¢–æ–≥–¥–∞='{then_text[:50]}...'")
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if given_text and given_text.lower() not in ['–¥–∞–Ω–æ', 'given']:
                        given_data.append(given_text)
                    if when_text and when_text.lower() not in ['–∫–æ–≥–¥–∞', 'when']:
                        when_data.append(when_text)
                    if then_text and then_text.lower() not in ['—Ç–æ–≥–¥–∞', 'then']:
                        then_data.append(then_text)
                else:
                    logger.warning(f"‚ö†Ô∏è –í —Å—Ç—Ä–æ–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è—á–µ–µ–∫: {len(cells)} < {max(actual_index_dano, actual_index_kogda, actual_index_togda) + 1}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)
            result = {
                'given': '\n'.join(given_data) if given_data else '',
                'when': '\n'.join(when_data) if when_data else '',
                'then': '\n'.join(then_data) if then_data else ''
            }
            
            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: –î–∞–Ω–æ={len(result['given'])} —Å–∏–º–≤–æ–ª–æ–≤, –ö–æ–≥–¥–∞={len(result['when'])} —Å–∏–º–≤–æ–ª–æ–≤, –¢–æ–≥–¥–∞={len(result['then'])} —Å–∏–º–≤–æ–ª–æ–≤")
            return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
            return {}

    def _format_acceptance_criteria_html(self, criteria: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø—Ä–∏—ë–º–∫–∏ –≤ HTML"""
        if not criteria:
            return ""
        
        html_parts = ["<h4>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏:</h4><ul>"]
        
        for criterion in criteria:
            html_parts.append(f"<li>{criterion}</li>")
        
        html_parts.append("</ul>")
        return "".join(html_parts)
    
    async def _create_user_stories_in_tfs(self, page_data: ConfluencePageData) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ User Stories –≤ TFS"""
        created_stories = []
        errors = []
        
        for us in page_data.user_stories:
            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ User Story
                story_id = await self._create_single_user_story(us, page_data)
                if story_id:
                    created_stories.append(story_id)
                    logger.info(f"‚úÖ User Story {us.title} —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {story_id}")
                else:
                    errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å User Story {us.title}")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ User Story {us.title}: {str(e)}"
                errors.append(error_msg)
                logger.error(error_msg)
        
        if created_stories:
            return {
                "success": True,
                "created_stories": created_stories,
                "errors": errors,
                "message": f"–°–æ–∑–¥–∞–Ω–æ {len(created_stories)} User Stories"
            }
        else:
            return {
                "success": False,
                "created_stories": [],
                "errors": errors,
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π User Story"
            }

    async def _create_single_user_story(self, us: UserStoryData, page_data: ConfluencePageData) -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π User Story –≤ TFS"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è TFS
            from app.models.request_models import UserStoryData as TFSUserStoryData
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
            parent_project = await self._get_parent_project(page_data.tfs_number)
            project = parent_project if parent_project else page_data.project
        
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è User Story
            story_data = TFSUserStoryData(
                title=us.title,
                description=us.user_story_text,
                project=project,
                parent_work_item_id=int(page_data.tfs_number) if page_data.tfs_number else None,
                user_story_text=us.user_story_text,
                given_conditions=us.given_conditions,
                when_actions=us.when_actions,
                then_results=us.then_results,
                acceptance_criteria=us.acceptance_criteria,
                tags=[]  # –£–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ User Story –≤ TFS
            parent_tfs_id = int(page_data.tfs_number) if page_data.tfs_number else None
            logger.info(f"üîó –°–æ–∑–¥–∞–Ω–∏–µ User Story —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —Ç–∏–∫–µ—Ç–æ–º: {parent_tfs_id}")
            
            story_id = await self.tfs_service.create_user_story(
                story_data=story_data,
                confluence_url=page_data.url,
                parent_tfs_id=parent_tfs_id
            )
            
            if story_id:
                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ create_user_story
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Wiki (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
                # await self._add_wiki_link(story_id, page_data.url)
                
                return story_id
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å User Story: {us.title}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ User Story {us.title}: {str(e)}")
            return None

    async def _add_creation_comment(self, story_id: int, confluence_url: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ User Story"""
        if confluence_url and confluence_url.strip() and confluence_url != "–Ω–µ —É–∫–∞–∑–∞–Ω–æ":
            comment = f"–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º TCA –∏–∑ —Å—Ç–∞—Ç—å–∏: {confluence_url}"
        else:
            comment = "–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º TCA"
        await self.tfs_service.add_comment(story_id, comment)
    
    async def _get_parent_project(self, tfs_number: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–∏–∫–µ—Ç–∞"""
        try:
            if not tfs_number:
                return None
                
            # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_number = tfs_number.replace('#', '')
            parent_id = int(clean_number)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ç–∏–∫–µ—Ç–µ
            parent_work_item = await self.tfs_service.get_work_item(parent_id)
            if parent_work_item and 'fields' in parent_work_item:
                project = parent_work_item['fields'].get('ST.ImplementationProject')
                if project:
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–µ–∫—Ç –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ #{parent_id}: {project}")
                    return project
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª–µ ST.ImplementationProject –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ç–∏–∫–µ—Ç–µ #{parent_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–∫–µ—Ç #{parent_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–∏–∫–µ—Ç–∞: {str(e)}")
        
        return None

    async def _add_wiki_link(self, story_id: int, wiki_url: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Wiki –≤ User Story"""
        try:
            logger.info(f"üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Wiki –¥–ª—è User Story {story_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º TFS —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Work Item
            await self.tfs_service.update_work_item_field(
                work_item_id=story_id,
                field_path="/fields/System.History",
                value=f"–°—Å—ã–ª–∫–∞ –Ω–∞ Wiki: {wiki_url}"
            )
            
            logger.info(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ Wiki –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ User Story {story_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ Wiki –∫ User Story {story_id}: {str(e)}")
    
    async def _update_work_item_history(self, story_id: int, comment: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ Work Item"""
        try:
            await self.tfs_service.add_comment(story_id, comment)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ {story_id}: {str(e)}")
    
    async def _create_parent_link(self, child_id: int, parent_tfs_number: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —Ç–∏–∫–µ—Ç–æ–º"""
        try:
            parent_id = await self._find_work_item_by_number(parent_tfs_number)
            if parent_id:
                await self.tfs_service.create_work_item_link(
                    source_work_item_id=child_id,
                    target_work_item_id=parent_id,
                    link_type="ST.Backlog.LinkTypes.Hierarchy-Reverse"
                )
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å {child_id} -> {parent_id} (–†–æ–¥–∏—Ç–µ–ª—å –≤ Backlog)")
            else:
                logger.warning(f"‚ö†Ô∏è –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–∫–µ—Ç #{parent_tfs_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —Ç–∏–∫–µ—Ç–æ–º: {str(e)}")
    
    async def _find_work_item_by_number(self, tfs_number: str) -> Optional[int]:
        """–ü–æ–∏—Å–∫ Work Item –ø–æ –Ω–æ–º–µ—Ä—É"""
        try:
            # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_number = tfs_number.replace('#', '')
            work_item_id = int(clean_number)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Work Item
            work_item = await self.tfs_service.get_work_item(work_item_id)
            if work_item:
                return work_item_id
            else:
                return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ Work Item #{tfs_number}: {str(e)}")
            return None
    
    async def _log_creation_results(self, creation_result: Dict[str, Any], page_data: ConfluencePageData):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è"""
        created_stories = creation_result["created_stories"]
        errors = creation_result["errors"]
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"‚úÖ User Stories —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ:")
        logger.info(f"   üìÑ –°—Ç–∞—Ç—å—è: {page_data.url}")
        logger.info(f"   üîó –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–∫–µ—Ç: #{page_data.tfs_number}")
        logger.info(f"   üìä –°–æ–∑–¥–∞–Ω–æ User Stories: {len(created_stories)}")
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π User Story
        for i, story_id in enumerate(created_stories):
            logger.info(f"   üìã US {i+1}: ID {story_id}")
            logger.info(f"      üÜî ID: {story_id}")
            logger.info(f"      üîó –°–≤—è–∑–∞–Ω —Å: #{page_data.tfs_number} (–†–æ–¥–∏—Ç–µ–ª—å –≤ Backlog)")
            logger.info(f"      üîó URL: https://tfssrv.systtech.ru/tfs/DefaultCollection/Houston/_workitems/edit/{story_id}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        if errors:
            logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:")
            for error in errors:
                logger.warning(f"      {error}")
        

def extract_criteria_as_json(extracted_data: List[Dict[str, str]]) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø—Ä–∏–µ–º–∫–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç
    
    Args:
        extracted_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–∏–µ–º–∫–∏
        
    Returns:
        str: JSON —Å—Ç—Ä–æ–∫–∞ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–∏–µ–º–∫–∏
    """
    import json
    return json.dumps(extracted_data, ensure_ascii=False, indent=2)


def extract_criteria_as_markdown_table(extracted_data: List[Dict[str, str]]) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø—Ä–∏–µ–º–∫–∏ –≤ Markdown —Ç–∞–±–ª–∏—Ü—É
    
    Args:
        extracted_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–∏–µ–º–∫–∏
        
    Returns:
        str: Markdown —Ç–∞–±–ª–∏—Ü–∞ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–∏–µ–º–∫–∏
    """
    if not extracted_data:
        return ""
    
    markdown = "| –î–∞–Ω–æ | –ö–æ–≥–¥–∞ | –¢–æ–≥–¥–∞ |\n"
    markdown += "|------|-------|-------|\n"
    
    for row in extracted_data:
        dano = row.get('–¥–∞–Ω–æ', '').replace('\n', '<br>').replace('|', '\\|')
        kogda = row.get('–∫–æ–≥–¥–∞', '').replace('\n', '<br>').replace('|', '\\|') 
        togda = row.get('—Ç–æ–≥–¥–∞', '').replace('\n', '<br>').replace('|', '\\|')
        markdown += f"| {dano} | {kogda} | {togda} |\n"
    
    return markdown

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
user_story_creator_service = UserStoryCreatorService()
