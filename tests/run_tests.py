#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
"""
import sys
import subprocess
import argparse
import os
from pathlib import Path


def run_command(command, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print("STDERR:", result.stderr)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
        print("STDOUT:", e.stdout)
        print("STDERR:", e.stderr)
        return False


def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è TFS-Confluence Automation")
    parser.add_argument("--type", choices=["unit", "integration", "all"], default="all",
                       help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--coverage", action="store_true",
                       help="–ó–∞–ø—É—Å–∫ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞")
    parser.add_argument("--verbose", "-v", action="store_true",
                       help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--parallel", "-n", type=int, default=1,
                       help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    parser.add_argument("--pattern", "-k", type=str,
                       help="–§–∏–ª—å—Ç—Ä —Ç–µ—Å—Ç–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
    parser.add_argument("--markers", "-m", type=str,
                       help="–§–∏–ª—å—Ç—Ä —Ç–µ—Å—Ç–æ–≤ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º")
    
    args = parser.parse_args()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    project_root = Path(__file__).parent.parent
    os.chdir(project_root)
    
    print("üéØ TFS-Confluence Automation - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {project_root}")
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ pytest
    pytest_options = ["pytest"]
    
    if args.verbose:
        pytest_options.append("-v")
    
    if args.coverage:
        pytest_options.extend(["--cov=app", "--cov-report=html", "--cov-report=term"])
    
    if args.parallel > 1:
        pytest_options.extend(["-n", str(args.parallel)])
    
    if args.pattern:
        pytest_options.extend(["-k", args.pattern])
    
    if args.markers:
        pytest_options.extend(["-m", args.markers])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    if args.type == "unit":
        pytest_options.append("tests/unit/")
        test_description = "Unit —Ç–µ—Å—Ç—ã"
    elif args.type == "integration":
        pytest_options.append("tests/integration/")
        test_description = "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    else:
        pytest_options.append("tests/")
        test_description = "–í—Å–µ —Ç–µ—Å—Ç—ã"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    command = " ".join(pytest_options)
    success = run_command(command, test_description)
    
    if success:
        print(f"\n‚úÖ {test_description} –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        if args.coverage:
            print("\nüìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ —Å–æ–∑–¥–∞–Ω –≤ htmlcov/index.html")
    else:
        print(f"\n‚ùå {test_description} –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)


if __name__ == "__main__":
    main()
