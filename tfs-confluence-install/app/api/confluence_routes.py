from fastapi import APIRouter, HTTPException, Query, Depends
from typing import List, Optional
import logging
from datetime import datetime

from app.services.confluence_service import confluence_service
from app.models.confluence_models import (
    ConfluencePageRequest, ConfluencePageResponse, ConfluenceTemplate,
    ConfluenceSpace, ConfluencePageUpdateRequest, ConfluenceCommentRequest,
    ConfluenceSearchRequest
)
from app.core.logging_config import log_api_request, log_confluence_operation

router = APIRouter(prefix="/confluence", tags=["Confluence"])
logger = logging.getLogger(__name__)

@router.post("/pages", response_model=ConfluencePageResponse)
async def create_page(request: ConfluencePageRequest):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Confluence
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    - –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫
    - –£–∫–∞–∑–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    try:
        logger.info(f"üåê API –∑–∞–ø—Ä–æ—Å: POST /confluence/pages")
        log_api_request(
            logger=logger,
            method="POST",
            endpoint="/confluence/pages",
            details={
                "title": request.title,
                "space_key": request.space_key,
                "template_id": request.template_id,
                "has_parent": bool(request.parent_id)
            }
        )
        
        result = await confluence_service.create_page_from_request(request)
        
        if result.success:
            log_confluence_operation(
                logger=logger,
                operation="–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ API",
                page_id=result.page_id,
                details={
                    "title": result.title,
                    "space_key": result.space_key,
                    "url": result.url,
                    "template_used": bool(request.template_id)
                }
            )
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ API: {str(e)}")
        return ConfluencePageResponse(
            success=False,
            error=f"–û—à–∏–±–∫–∞ API: {str(e)}"
        )

@router.get("/pages", response_model=List[ConfluencePageResponse])
async def search_pages(
    query: str = Query(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    space_key: Optional[str] = Query(None, description="–ö–ª—é—á –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"),
    content_type: str = Query("page", description="–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
    limit: int = Query(10, ge=1, le=100, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    start: int = Query(0, ge=0, description="–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è")
):
    """
    –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ Confluence
    """
    try:
        logger.info(f"üåê API –∑–∞–ø—Ä–æ—Å: GET /confluence/pages")
        log_api_request(
            logger=logger,
            method="GET",
            endpoint="/confluence/pages",
            details={
                "query": query,
                "space_key": space_key,
                "limit": limit
            }
        )
        
        search_request = ConfluenceSearchRequest(
            query=query,
            space_key=space_key,
            content_type=content_type,
            limit=limit,
            start=start
        )
        
        results = await confluence_service.search_pages(search_request)
        
        log_confluence_operation(
            logger=logger,
            operation="–ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —á–µ—Ä–µ–∑ API",
            details={
                "query": query,
                "results_count": len(results),
                "space_key": space_key
            }
        )
        
        return results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

@router.get("/templates", response_model=List[ConfluenceTemplate])
async def get_templates(
    space_key: Optional[str] = Query(None, description="–ö–ª—é—á –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
    """
    try:
        logger.info(f"üåê API –∑–∞–ø—Ä–æ—Å: GET /confluence/templates")
        log_api_request(
            logger=logger,
            method="GET",
            endpoint="/confluence/templates",
            details={"space_key": space_key}
        )
        
        templates = await confluence_service.get_templates(space_key)
        
        log_confluence_operation(
            logger=logger,
            operation="–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ API",
            details={
                "templates_count": len(templates),
                "space_key": space_key
            }
        )
        
        return templates
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")

@router.get("/templates/{template_id}", response_model=ConfluenceTemplate)
async def get_template(template_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø–æ ID
    """
    try:
        logger.info(f"üåê API –∑–∞–ø—Ä–æ—Å: GET /confluence/templates/{template_id}")
        log_api_request(
            logger=logger,
            method="GET",
            endpoint=f"/confluence/templates/{template_id}",
            details={"template_id": template_id}
        )
        
        template = await confluence_service.get_template(template_id)
        
        if not template:
            raise HTTPException(status_code=404, detail="–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        log_confluence_operation(
            logger=logger,
            operation="–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —á–µ—Ä–µ–∑ API",
            page_id=template_id,
            details={
                "template_name": template.name,
                "space_key": template.space_key
            }
        )
        
        return template
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ {template_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {str(e)}")

@router.get("/spaces", response_model=List[ConfluenceSpace])
async def get_spaces():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ Confluence
    """
    try:
        logger.info(f"üåê API –∑–∞–ø—Ä–æ—Å: GET /confluence/spaces")
        log_api_request(
            logger=logger,
            method="GET",
            endpoint="/confluence/spaces"
        )
        
        spaces = await confluence_service.get_spaces()
        
        log_confluence_operation(
            logger=logger,
            operation="–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ —á–µ—Ä–µ–∑ API",
            details={"spaces_count": len(spaces)}
        )
        
        return spaces
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {str(e)}")

@router.put("/pages/{page_id}", response_model=ConfluencePageResponse)
async def update_page(page_id: str, request: ConfluencePageUpdateRequest):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    try:
        logger.info(f"üåê API –∑–∞–ø—Ä–æ—Å: PUT /confluence/pages/{page_id}")
        log_api_request(
            logger=logger,
            method="PUT",
            endpoint=f"/confluence/pages/{page_id}",
            details={
                "page_id": page_id,
                "title": request.title,
                "version": request.version
            }
        )
        
        result = await confluence_service.update_page(
            page_id=page_id,
            title=request.title,
            content=request.content
        )
        
        log_confluence_operation(
            logger=logger,
            operation="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ API",
            page_id=page_id,
            details={
                "title": request.title,
                "version": request.version
            }
        )
        
        return ConfluencePageResponse(
            success=True,
            page_id=result["id"],
            title=result["title"],
            url=result["url"],
            space_key=result.get("space_key"),
            version=result["version"],
            created_at=result["updated_at"]
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_id}: {str(e)}")
        return ConfluencePageResponse(
            success=False,
            error=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"
        )

@router.post("/pages/{page_id}/comments", response_model=dict)
async def add_comment(page_id: str, request: ConfluenceCommentRequest):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    """
    try:
        logger.info(f"üåê API –∑–∞–ø—Ä–æ—Å: POST /confluence/pages/{page_id}/comments")
        log_api_request(
            logger=logger,
            method="POST",
            endpoint=f"/confluence/pages/{page_id}/comments",
            details={
                "page_id": page_id,
                "comment_length": len(request.comment)
            }
        )
        
        result = await confluence_service.add_comment(
            page_id=page_id,
            comment=request.comment
        )
        
        log_confluence_operation(
            logger=logger,
            operation="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API",
            page_id=page_id,
            details={
                "comment_id": result["id"],
                "comment_length": len(request.comment)
            }
        )
        
        return {
            "success": True,
            "comment_id": result["id"],
            "page_id": page_id,
            "created_at": result["created_at"]
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_id}: {str(e)}")
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {str(e)}"
        }

@router.get("/pages/{page_id}", response_model=ConfluencePageResponse)
async def get_page(page_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ ID
    """
    try:
        logger.info(f"üåê API –∑–∞–ø—Ä–æ—Å: GET /confluence/pages/{page_id}")
        log_api_request(
            logger=logger,
            method="GET",
            endpoint=f"/confluence/pages/{page_id}",
            details={"page_id": page_id}
        )
        
        article = await confluence_service.get_article_by_id(page_id)
        
        if not article:
            raise HTTPException(status_code=404, detail="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        log_confluence_operation(
            logger=logger,
            operation="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ API",
            page_id=page_id,
            details={
                "title": article.title,
                "space_key": article.space_key
            }
        )
        
        return article
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")

@router.post("/pages/quick-create", response_model=ConfluencePageResponse)
async def quick_create_page(
    title: str,
    content: str,
    space_key: str = "DEV",
    parent_id: Optional[str] = None,
    labels: Optional[List[str]] = None
):
    """
    –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    try:
        logger.info(f"üåê API –∑–∞–ø—Ä–æ—Å: POST /confluence/pages/quick-create")
        log_api_request(
            logger=logger,
            method="POST",
            endpoint="/confluence/pages/quick-create",
            details={
                "title": title,
                "space_key": space_key,
                "has_parent": bool(parent_id),
                "labels_count": len(labels) if labels else 0
            }
        )
        
        request = ConfluencePageRequest(
            title=title,
            content=content,
            space_key=space_key,
            parent_id=parent_id,
            labels=labels or []
        )
        
        result = await confluence_service.create_page_from_request(request)
        
        log_confluence_operation(
            logger=logger,
            operation="–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ API",
            page_id=result.page_id,
            details={
                "title": result.title,
                "space_key": result.space_key,
                "url": result.url
            }
        )
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
        return ConfluencePageResponse(
            success=False,
            error=f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: {str(e)}"
        )
