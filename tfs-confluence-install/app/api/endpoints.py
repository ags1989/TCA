from fastapi import APIRouter, HTTPException, BackgroundTasks
from typing import Dict, Any, Optional
import time
import traceback
import logging
from datetime import datetime
from app.models.request_models import UserRequest
from app.models.response_models import (
    DetailedProcessingResult, ExecutionStep, ActionStatus, 
    CreatedWorkItem, ConfluenceArticleInfo, ProcessingError
)
from app.models.confluence_models import ConfluencePageRequest, ConfluencePageResponse
from app.services.openai_service import OpenAIService
from app.services.confluence_service import ConfluenceService
from app.services.tfs_service import TFSService
from app.services.user_story_creator_service import user_story_creator_service
from app.config.settings import settings
from app.core.startup import get_connection_status, get_system_info, global_services
from app.core.logging_config import log_api_request, log_user_action, log_tfs_operation, log_confluence_operation

router = APIRouter()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
openai_service = OpenAIService()
confluence_service = ConfluenceService()
tfs_service = TFSService()

@router.post("/process-request", response_model=DetailedProcessingResult)
async def process_user_request(request: UserRequest) -> DetailedProcessingResult:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º
    """
    
    logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{request.query[:100]}...'")
    logger.info(f"   üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"   üîç –î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: {len(request.query)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –õ–æ–≥–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
    log_api_request(
        logger=logger,
        method="POST",
        endpoint="/process-request",
        details={
            "query_length": len(request.query),
            "query_preview": request.query[:100] + "..." if len(request.query) > 100 else request.query
        }
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log_user_action(
        logger=logger,
        action="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É",
        details={
            "query": request.query[:200] + "..." if len(request.query) > 200 else request.query
        }
    )
    
    result = DetailedProcessingResult(
        success=False,
        user_query=request.query,
        processing_start=datetime.now(),
        summary="–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        confirmation_text = request.query.lower().strip()
        is_confirmation = confirmation_text in ["–¥–∞", "—Å–æ–∑–¥–∞—Ç—å", "yes", "create", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–Ω–µ—Ç", "–æ—Ç–º–µ–Ω–∞", "no", "cancel"]
        
        if is_confirmation:
            logger.info("‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return await handle_user_confirmation(request, result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories –∏–∑ Confluence
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: '{request.query}'")
        is_us_request = await is_user_story_creation_request(request.query)
        logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ User Story –∑–∞–ø—Ä–æ—Å–∞: {is_us_request}")
        
        if is_us_request:
            logger.info("‚úÖ –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories")
            return await handle_user_story_creation_request(request, result)
        
        # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ OpenAI
        step1 = await execute_step(
            result, "–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            lambda: openai_service.analyze_user_request(request.query)
        )
        
        if step1["status"] == ActionStatus.FAILED:
            return finalize_result(result, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        keywords = step1["data"].get("search_keywords", "")
        result.extracted_keywords = keywords
        
        # –®–∞–≥ 2: –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏ –≤ Confluence
        step2 = await execute_step(
            result, "–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏ –≤ Confluence",
            lambda: confluence_service.search_articles(keywords)
        )
        
        if step2["status"] == ActionStatus.FAILED or not step2["data"]:
            return finalize_result(result, f"–°—Ç–∞—Ç—å–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{keywords}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Confluence")
        
        articles = step2["data"]
        selected_article = articles[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
        result.confluence_article = ConfluenceArticleInfo(
            id=selected_article.id,
            title=selected_article.title,
            url=f"{settings.CONFLUENCE_URL}/pages/viewpage.action?pageId={selected_article.id}",
            space_key=selected_article.space_key,
            content_length=len(selected_article.content)
        )
        
        # –®–∞–≥ 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è User Story
        step3 = await execute_step(
            result, "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è User Story",
            lambda: openai_service.extract_story_data(selected_article)
        )
        
        if step3["status"] == ActionStatus.FAILED:
            return finalize_result(result, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è User Story")
        
        story_data = step3["data"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
        if result.confluence_article:
            result.confluence_article.extracted_project = story_data.project
            result.confluence_article.extracted_team = [story_data.assigned_to, story_data.tech_lead] + (story_data.developers or [])
            result.confluence_article.parent_tfs_reference = story_data.parent_work_item_id
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ User Story –≤ TFS
        step4 = await execute_step(
            result, "–°–æ–∑–¥–∞–Ω–∏–µ User Story –≤ TFS",
            lambda: tfs_service.create_user_story(story_data)
        )
        
        if step4["status"] == ActionStatus.FAILED:
            return finalize_result(result, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å User Story –≤ TFS")
        
        user_story_id = step4["data"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π User Story
        user_story_url = f"{settings.TFS_URL}/{settings.TFS_PROJECT}/_workitems/edit/{user_story_id}"
        created_us = CreatedWorkItem(
            id=user_story_id,
            title=story_data.title,
            work_item_type="User Story",
            state="New",
            assigned_to=story_data.assigned_to,
            url=user_story_url,
            created_date=datetime.now(),
            story_points=story_data.story_points,
            priority=story_data.priority,
            tags=story_data.tags or []
        )
        result.created_work_items.append(created_us)
        
        # –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if story_data.parent_work_item_id:
            step5 = await execute_step(
                result, f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º #{story_data.parent_work_item_id}",
                lambda: tfs_service.create_parent_link(user_story_id, story_data.parent_work_item_id)
            )
            
            if step5["status"] == ActionStatus.SUCCESS:
                result.created_relations.append({
                    "child_id": user_story_id,
                    "parent_id": story_data.parent_work_item_id,
                    "relation_type": "System.LinkTypes.Hierarchy-Reverse",
                    "description": "–†–æ–¥–∏—Ç–µ–ª—å –≤ backlog"
                })
                created_us.parent_id = story_data.parent_work_item_id
        
        # –®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–¥–∑–∞–¥–∞—á
        if story_data.implementation_objects:
            step6 = await execute_step(
                result, f"–°–æ–∑–¥–∞–Ω–∏–µ {len(story_data.implementation_objects)} –ø–æ–¥–∑–∞–¥–∞—á",
                lambda: tfs_service.create_linked_tasks(user_story_id, story_data.implementation_objects)
            )
            
            if step6["status"] == ActionStatus.SUCCESS:
                task_ids = step6["data"]
                created_us.child_ids = task_ids
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
                for i, (task_id, obj_name) in enumerate(zip(task_ids, story_data.implementation_objects)):
                    task_url = f"{settings.TFS_URL}/{settings.TFS_PROJECT}/_workitems/edit/{task_id}"
                    created_task = CreatedWorkItem(
                        id=task_id,
                        title=f"–î–æ—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {obj_name}",
                        work_item_type="Task",
                        state="New",
                        url=task_url,
                        parent_id=user_story_id,
                        created_date=datetime.now(),
                        priority=story_data.priority,
                        tags=["subtask", "component-work"]
                    )
                    result.created_work_items.append(created_task)
                    
                    # –°–≤—è–∑—å –ø–æ–¥–∑–∞–¥–∞—á–∏ —Å User Story
                    result.created_relations.append({
                        "child_id": task_id,
                        "parent_id": user_story_id,
                        "relation_type": "System.LinkTypes.Hierarchy-Reverse",
                        "description": f"–ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ {obj_name}"
                    })
        
        # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        return finalize_result(result, generate_success_summary(result), success=True)
        
    except Exception as e:
        error = ProcessingError(
            error_type="UnexpectedError",
            error_message=str(e),
            occurred_at=datetime.now(),
            step_name="–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å",
            technical_details=traceback.format_exc(),
            suggestion="–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã"
        )
        result.errors.append(error)
        return finalize_result(result, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

async def execute_step(result: DetailedProcessingResult, step_name: str, action_func) -> Dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—à–∏–±–æ–∫"""
    
    step = ExecutionStep(
        step_name=step_name,
        status=ActionStatus.SUCCESS,
        start_time=datetime.now()
    )
    
    try:
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º: {step_name}")
        action_result = await action_func()
        
        step.end_time = datetime.now()
        step.duration_seconds = (step.end_time - step.start_time).total_seconds()
        step.details = f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –∑–∞ {step.duration_seconds:.2f} —Å–µ–∫"
        step.data = {"result": action_result}
        
        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {step_name}")
        
        result.execution_steps.append(step)
        return {"status": ActionStatus.SUCCESS, "data": action_result}
        
    except Exception as e:
        step.status = ActionStatus.FAILED
        step.end_time = datetime.now()
        step.duration_seconds = (step.end_time - step.start_time).total_seconds()
        step.error_message = str(e)
        step.details = f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {step.duration_seconds:.2f} —Å–µ–∫: {str(e)}"
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
        error = ProcessingError(
            error_type=type(e).__name__,
            error_message=str(e),
            occurred_at=datetime.now(),
            step_name=step_name,
            technical_details=traceback.format_exc(),
            suggestion=get_error_suggestion(type(e).__name__, str(e))
        )
        result.errors.append(error)
        
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {step_name}: {str(e)}")
        
        result.execution_steps.append(step)
        return {"status": ActionStatus.FAILED, "error": str(e)}

def get_error_suggestion(error_type: str, error_message: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—à–∏–±–∫–∏"""
    
    suggestions = {
        "ConnectionError": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤",
        "AuthenticationError": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π –∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö",
        "ValidationError": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "TimeoutError": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ",
        "HTTPError": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö API —Å–µ—Ä–≤–∏—Å–æ–≤",
        "JSONDecodeError": "–í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
    }
    
    for error_key, suggestion in suggestions.items():
        if error_key in error_type:
            return suggestion
    
    if "openai" in error_message.lower():
        return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á OpenAI –∏ –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ"
    elif "confluence" in error_message.lower():
        return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Confluence –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞"
    elif "tfs" in error_message.lower() or "azure" in error_message.lower():
        return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å TFS/Azure DevOps –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
    
    return "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"

def generate_success_summary(result: DetailedProcessingResult) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"""
    
    created_items = len(result.created_work_items)
    created_relations = len(result.created_relations)
    
    us_count = len([item for item in result.created_work_items if item.work_item_type == "User Story"])
    task_count = len([item for item in result.created_work_items if item.work_item_type == "Task"])
    
    summary_parts = [
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–∑–¥–∞–Ω–æ {created_items} —Ä–∞–±–æ—á–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ TFS:"
    ]
    
    if us_count > 0:
        summary_parts.append(f"   ‚Ä¢ {us_count} User Story")
    if task_count > 0:
        summary_parts.append(f"   ‚Ä¢ {task_count} Task")
    
    if created_relations > 0:
        summary_parts.append(f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ {created_relations} —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
    
    if result.confluence_article:
        summary_parts.append(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: '{result.confluence_article.title}'")
        if result.confluence_article.parent_tfs_reference:
            summary_parts.append(f"   ‚Ä¢ –°–≤—è–∑–∞–Ω–æ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º #{result.confluence_article.parent_tfs_reference}")
    
    return "\n".join(summary_parts)

def finalize_result(result: DetailedProcessingResult, summary: str, success: bool = False) -> DetailedProcessingResult:
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    result.processing_end = datetime.now()
    result.total_duration_seconds = (result.processing_end - result.processing_start).total_seconds()
    result.success = success
    result.summary = summary
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if success:
        result.recommendations = [
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ TFS",
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–≤—è–∑–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
        ]
    else:
        result.recommendations = [
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã",
            "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API –∫–ª—é—á–µ–π",
            "–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        ]
    
    logger.info(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {result.total_duration_seconds:.2f} —Å–µ–∫. –£—Å–ø–µ—Ö: {success}")
    
    return result

@router.get("/status")
async def get_system_status():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
    """
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "version": "2.0.0",
            "services": {
                "openai": {
                    "available": False,  # –û—Ç–∫–ª—é—á–µ–Ω
                    "name": "OpenAI",
                    "description": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ—Ç–∫–ª—é—á–µ–Ω)"
                },
                "confluence": {
                    "available": True,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    "name": "Confluence",
                    "description": "–°–∏—Å—Ç–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∑–Ω–∞–Ω–∏–π"
                },
                "tfs": {
                    "available": True,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    "name": "TFS/Azure DevOps",
                    "description": "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏"
                }
            },
            "system": {
                "debug_mode": settings.DEBUG,
                "log_level": settings.LOG_LEVEL,
                "services_loaded": 3
            }
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return {
            "status": "error",
            "timestamp": datetime.now().isoformat(),
            "error": str(e)
        }

@router.post("/confluence/pages", response_model=ConfluencePageResponse)
async def create_confluence_page(request: ConfluencePageRequest):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Confluence
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    - –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫
    - –£–∫–∞–∑–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    try:
        logger.info(f"üåê API –∑–∞–ø—Ä–æ—Å: POST /confluence/pages")
        log_api_request(
            logger=logger,
            method="POST",
            endpoint="/confluence/pages",
            details={
                "title": request.title,
                "space_key": request.space_key,
                "template_id": request.template_id,
                "has_parent": bool(request.parent_id)
            }
        )
        
        confluence_service = ConfluenceService()
        result = await confluence_service.create_page_from_request(request)
        
        if result.success:
            log_confluence_operation(
                logger=logger,
                operation="–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ API",
                page_id=result.page_id,
                details={
                    "title": result.title,
                    "space_key": result.space_key,
                    "url": result.url,
                    "template_used": bool(request.template_id)
                }
            )
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ API: {str(e)}")
        return ConfluencePageResponse(
            success=False,
            error=f"–û—à–∏–±–∫–∞ API: {str(e)}"
        )

@router.post("/confluence/pages/quick-create", response_model=ConfluencePageResponse)
async def quick_create_confluence_page(
    title: str,
    content: str,
    space_key: str = "DEV",
    parent_id: str = None,
    labels: str = None
):
    """
    –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Confluence —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    - content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    - space_key: –ö–ª—é—á –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "DEV")
    - parent_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - labels: –ú–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        logger.info(f"üåê API –∑–∞–ø—Ä–æ—Å: POST /confluence/pages/quick-create")
        log_api_request(
            logger=logger,
            method="POST",
            endpoint="/confluence/pages/quick-create",
            details={
                "title": title,
                "space_key": space_key,
                "has_parent": bool(parent_id),
                "labels": labels
            }
        )
        
        # –ü–∞—Ä—Å–∏–º –º–µ—Ç–∫–∏
        labels_list = []
        if labels:
            labels_list = [label.strip() for label in labels.split(",") if label.strip()]
        
        request = ConfluencePageRequest(
            title=title,
            content=content,
            space_key=space_key,
            parent_id=parent_id,
            labels=labels_list
        )
        
        confluence_service = ConfluenceService()
        result = await confluence_service.create_page_from_request(request)
        
        if result.success:
            log_confluence_operation(
                logger=logger,
                operation="–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ API",
                page_id=result.page_id,
                details={
                    "title": result.title,
                    "space_key": result.space_key,
                    "url": result.url,
                    "labels": labels_list
                }
            )
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
        return ConfluencePageResponse(
            success=False,
            error=f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: {str(e)}"
        )

async def is_user_story_creation_request(query: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories –∏–∑ Confluence
    """
    query_lower = query.lower()
    logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ User Story: '{query_lower}'")
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    creation_keywords = [
        "—Å–æ–∑–¥–∞–π us –≤ tfs",
        "—Å–æ–∑–¥–∞—Ç—å us –≤ tfs", 
        "—Å–æ–∑–¥–∞–π user story –≤ tfs",
        "—Å–æ–∑–¥–∞—Ç—å user story –≤ tfs",
        "—Å–æ–∑–¥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ tfs",
        "—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ tfs",
        "—Å–æ–∑–¥–∞–π us",
        "—Å–æ–∑–¥–∞—Ç—å us",
        "—Å–æ–∑–¥–∞–π user story",
        "—Å–æ–∑–¥–∞—Ç—å user story",
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
        "—Å–æ–∑–¥–∞–π —Ü–µ–ø–æ—á–∫—É",
        "—Å–æ–∑–¥–∞—Ç—å —Ü–µ–ø–æ—á–∫—É",
        "—Å–æ–∑–¥–∞–π —Ü–µ–ø–æ—á–∫—É —Ç–∏–∫–µ—Ç–æ–≤",
        "—Å–æ–∑–¥–∞—Ç—å —Ü–µ–ø–æ—á–∫—É —Ç–∏–∫–µ—Ç–æ–≤",
        "—Å–æ–∑–¥–∞–π —Ü–µ–ø–æ—á–∫—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤",
        "—Å–æ–∑–¥–∞—Ç—å —Ü–µ–ø–æ—á–∫—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤",
        "—Ü–µ–ø–æ—á–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤",
        "—Ü–µ–ø–æ—á–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for keyword in creation_keywords:
        if keyword in query_lower:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}'")
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL Confluence
    confluence_url_patterns = [
        "confluence.systtech.ru",
        "confluence",
        "pageid=",
        "pages/viewpage.action"
    ]
    
    for pattern in confluence_url_patterns:
        if pattern in query_lower:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω URL Confluence: '{pattern}'")
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é "—Å–æ–∑–¥–∞–π" + "–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏" + URL
    if "—Å–æ–∑–¥–∞–π" in query_lower and "–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏" in query_lower:
        logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è '—Å–æ–∑–¥–∞–π' + '–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏'")
        return True
    
    logger.info("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories")
    return False

async def handle_user_story_creation_request(request: UserRequest, result: DetailedProcessingResult) -> DetailedProcessingResult:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories –∏–∑ Confluence –∏–ª–∏ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
    """
    try:
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ: {request.query}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
        query_lower = request.query.lower()
        chain_keywords = ["—Ü–µ–ø–æ—á–∫–∞", "—Ü–µ–ø–æ—á–∫—É", "—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"]
        is_chain_request = any(keyword in query_lower for keyword in chain_keywords)
        
        if is_chain_request:
            logger.info("üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤")
            return await handle_change_chain_request(request, result)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ User Stories: {request.query}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        confluence_url = extract_confluence_url(request.query)
        if not confluence_url:
            return finalize_result(result, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence –≤ –∑–∞–ø—Ä–æ—Å–µ")
        
        # –°–æ–∑–¥–∞–µ–º User Stories —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
        creation_result = await user_story_creator_service.create_user_stories_from_confluence(
            confluence_url=confluence_url,
            user_confirmation=None  # –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –Ω—É–∂–µ–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        )
        
        if creation_result["success"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            if creation_result.get("needs_confirmation"):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                preview_data = creation_result["preview"]
                result.message = f"–ù–∞–π–¥–µ–Ω–æ {len(preview_data['user_stories'])} User Stories –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n\n"
                
                for i, us in enumerate(preview_data["user_stories"], 1):
                    result.message += f"{i}. **{us['title']}**\n"
                    result.message += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {us['description'][:100]}...\n"
                    result.message += f"   –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏: {len(us['acceptance_criteria'])} –ø—É–Ω–∫—Ç–æ–≤\n\n"
                
                result.message += "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: '–î–∞' –∏–ª–∏ '–°–æ–∑–¥–∞—Ç—å'\n"
                result.message += "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: '–ù–µ—Ç' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                result.additional_data = {
                    "confluence_url": confluence_url,
                    "page_data": creation_result.get("page_data"),
                    "preview": preview_data
                }
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result.success = True
                result.summary = "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è User Stories"
                result.processing_end = datetime.now()
                result.duration_seconds = (result.processing_end - result.processing_start).total_seconds()
                
                return result
            else:
                # User Stories —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã
                for story in creation_result["created_stories"]:
                    created_us = CreatedWorkItem(
                        id=story["id"],
                        title=story["title"],
                        work_item_type="User Story",
                        state="New",
                        assigned_to="",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                        url=story["url"],
                        created_date=datetime.now(),
                        story_points=5,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        priority=2,      # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        tags=["confluence", "auto-generated", "TCA"]
                    )
                    result.created_work_items.append(created_us)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
                created_stories = creation_result.get('created_stories', [])
                parent_ticket = creation_result.get('parent_ticket', '')
                confluence_url = confluence_url
                
                message_parts = [
                    "‚úÖ User Stories —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ:",
                    f"üìÑ –°—Ç–∞—Ç—å—è: <a href=\"{confluence_url}\" target=\"_blank\">{confluence_url}</a>",
                    f"üîó –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–∫–µ—Ç: <a href=\"#\" onclick=\"openTfsTicket('{parent_ticket}')\">{parent_ticket}</a>",
                    f"üìä –°–æ–∑–¥–∞–Ω–æ User Stories: {len(created_stories)}"
                ]
                
                for i, story in enumerate(created_stories, 1):
                    story_id = story.get("id", "")
                    story_title = story.get("title", "")
                    story_url = story.get("url", "")
                    message_parts.extend([
                        f"üìã US {i}: <a href=\"{story_url}\" target=\"_blank\">{story_id}</a> - {story_title}",
                        f"üîó –°–≤—è–∑–∞–Ω —Å: <a href=\"#\" onclick=\"openTfsTicket('{parent_ticket}')\">#{parent_ticket}</a> (–†–æ–¥–∏—Ç–µ–ª—å –≤ Backlog)"
                    ])
                
                detailed_message = "<br>".join(message_parts)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result.success = True
                result.summary = f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_stories)} User Stories –∏–∑ —Å—Ç–∞—Ç—å–∏ Confluence"
                result.message = detailed_message
                result.processing_end = datetime.now()
                result.duration_seconds = (result.processing_end - result.processing_start).total_seconds()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ Confluence
                result.confluence_article = ConfluenceArticleInfo(
                    id="",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ URL
                    title="–°—Ç–∞—Ç—å—è Confluence",
                    url=confluence_url,
                    space_key="",
                    content_length=0
                )
                
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(creation_result['created_stories'])} User Stories")
                return result
        else:
            return finalize_result(result, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ User Stories: {creation_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è User Stories: {str(e)}")
        return finalize_result(result, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ User Stories: {str(e)}")

async def handle_user_confirmation(request: UserRequest, result: DetailedProcessingResult) -> DetailedProcessingResult:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è User Stories
    """
    try:
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request.query}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        if not hasattr(result, 'additional_data') or not result.additional_data:
            return finalize_result(result, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è User Stories. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ.")
        
        additional_data = result.additional_data
        confluence_url = additional_data.get("confluence_url")
        
        if not confluence_url:
            return finalize_result(result, "–ù–µ –Ω–∞–π–¥–µ–Ω URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è User Stories")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        confirmation_text = request.query.lower().strip()
        is_confirmed = confirmation_text in ["–¥–∞", "—Å–æ–∑–¥–∞—Ç—å", "yes", "create", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"]
        
        if not is_confirmed:
            return finalize_result(result, "–°–æ–∑–¥–∞–Ω–∏–µ User Stories –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        # –°–æ–∑–¥–∞–µ–º User Stories —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        creation_result = await user_story_creator_service.create_user_stories_from_confluence(
            confluence_url=confluence_url,
            user_confirmation="–î–∞"
        )
        
        if creation_result["success"]:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö User Stories
            for story in creation_result["created_stories"]:
                created_us = CreatedWorkItem(
                    id=story["id"],
                    title=story["title"],
                    work_item_type="User Story",
                    state="New",
                    assigned_to="",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    url=story["url"],
                    created_date=datetime.now(),
                    story_points=5,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    priority=2,      # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    tags=["confluence", "auto-generated", "TCA"]
                )
                result.created_work_items.append(created_us)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            created_stories = creation_result.get('created_stories', [])
            parent_ticket = creation_result.get('parent_ticket', '')
            
            message_parts = [
                "‚úÖ User Stories —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ:",
                f"üìÑ –°—Ç–∞—Ç—å—è: <a href=\"{confluence_url}\" target=\"_blank\">{confluence_url}</a>",
                f"üîó –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–∫–µ—Ç: <a href=\"#\" onclick=\"openTfsTicket('{parent_ticket}')\">{parent_ticket}</a>",
                f"üìä –°–æ–∑–¥–∞–Ω–æ User Stories: {len(created_stories)}"
            ]
            
            for i, story in enumerate(created_stories, 1):
                story_id = story.get("id", "")
                story_title = story.get("title", "")
                story_url = story.get("url", "")
                message_parts.extend([
                    f"üìã US {i}: <a href=\"{story_url}\" target=\"_blank\">{story_id}</a> - {story_title}",
                    f"üîó –°–≤—è–∑–∞–Ω —Å: <a href=\"#\" onclick=\"openTfsTicket('{parent_ticket}')\">#{parent_ticket}</a> (–†–æ–¥–∏—Ç–µ–ª—å –≤ Backlog)"
                ])
            
            detailed_message = "<br>".join(message_parts)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result.success = True
            result.summary = f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_stories)} User Stories –∏–∑ —Å—Ç–∞—Ç—å–∏ Confluence"
            result.message = detailed_message
            result.processing_end = datetime.now()
            result.duration_seconds = (result.processing_end - result.processing_start).total_seconds()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ Confluence
            result.confluence_article = ConfluenceArticleInfo(
                id="",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ URL
                title="–°—Ç–∞—Ç—å—è Confluence",
                url=confluence_url,
                space_key="",
                content_length=0
            )
            
            # –û—á–∏—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            result.additional_data = None
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(creation_result['created_stories'])} User Stories –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return result
        else:
            return finalize_result(result, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ User Stories: {creation_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}")
        return finalize_result(result, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}")

async def handle_change_chain_request(request: UserRequest, result: DetailedProcessingResult) -> DetailedProcessingResult:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
    """
    try:
        logger.info(f"üîó –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤: {request.query}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Ü–µ–ø–æ—á–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        from app.services.change_chain_service import change_chain_service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TFS
        tfs_connected = await change_chain_service.tfs_service.test_connection()
        if not tfs_connected:
            return finalize_result(result, "TFS —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
        
        # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
        parsed_data = await change_chain_service.parse_change_request(request.query)
        
        if not parsed_data.get("sourceBacklogId"):
            return finalize_result(result, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #123456")
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
        chain_result = await change_chain_service.create_linked_change_chain(
            project=parsed_data["project"],
            request_title=parsed_data["requestTitle"],
            source_backlog_id=parsed_data["sourceBacklogId"],
            request_id=parsed_data.get("requestId")
        )
        
        if chain_result.get("success"):
            result.success = True
            result.summary = "–¶–µ–ø–æ—á–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            result.message = f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤:\n\n"
            result.message += f"üìã **Epic**: {chain_result.get('Epic', {}).get('title', 'N/A')}\n"
            result.message += f"üîó **Feature**: {chain_result.get('Feature', {}).get('title', 'N/A')}\n"
            result.message += f"üìù **Backlog Item**: {chain_result.get('Backlog Item', {}).get('title', 'N/A')}\n\n"
            result.message += f"üéØ **–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–∏–∫–µ—Ç**: #{parsed_data['sourceBacklogId']}\n"
            result.message += f"üîó **–°–≤—è–∑—å**: Backlog Item —Å–≤—è–∑–∞–Ω —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–∏–∫–µ—Ç–æ–º –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç"
            
            result.extracted_data = chain_result
            result.processing_end = datetime.now()
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è #{parsed_data['sourceBacklogId']}")
            return result
        else:
            return finalize_result(result, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤: {chain_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ü–µ–ø–æ—á–∫—É —Ç–∏–∫–µ—Ç–æ–≤: {str(e)}")
        return finalize_result(result, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤: {str(e)}")

def extract_confluence_url(query: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    import re
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
    url_patterns = [
        r'https://confluence\.systtech\.ru/pages/viewpage\.action\?pageId=\d+',
        r'https://confluence\.systtech\.ru/.*?pageId=(\d+)',
        r'confluence\.systtech\.ru.*?pageId=(\d+)',
        r'pageId=(\d+)'
    ]
    
    for pattern in url_patterns:
        match = re.search(pattern, query, re.IGNORECASE)
        if match:
            if 'pageId=' in match.group(0):
                return match.group(0)
            else:
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ pageId, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
                page_id = match.group(1)
                return f"https://confluence.systtech.ru/pages/viewpage.action?pageId={page_id}"
    
    return None
