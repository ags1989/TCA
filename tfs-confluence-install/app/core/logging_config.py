import logging
import logging.handlers
import os
from datetime import datetime
from pathlib import Path

def setup_logging(log_level: str = "INFO", log_file: str = None) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    Args:
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é logs/app.log)
    """
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if log_file:
        log_path = Path(log_file)
        log_path.parent.mkdir(parents=True, exist_ok=True)
    else:
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        log_file = str(log_dir / "app.log")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    detailed_formatter = logging.Formatter(
        fmt='%(asctime)s | %(levelname)-8s | %(name)-20s | %(funcName)-15s:%(lineno)-4d | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    simple_formatter = logging.Formatter(
        fmt='%(asctime)s | %(levelname)-8s | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    root_logger.setLevel(getattr(logging, log_level.upper()))
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # 1. –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–≤—Å–µ —É—Ä–æ–≤–Ω–∏)
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(simple_formatter)
    root_logger.addHandler(console_handler)
    
    # 2. –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–≤—Å–µ —É—Ä–æ–≤–Ω–∏)
    file_handler = logging.handlers.RotatingFileHandler(
        log_file, 
        maxBytes=10*1024*1024,  # 10MB
        backupCount=5,
        encoding='utf-8'
    )
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(detailed_formatter)
    root_logger.addHandler(file_handler)
    
    # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫ (—Ç–æ–ª—å–∫–æ ERROR –∏ CRITICAL)
    error_file = str(Path(log_file).parent / "errors.log")
    error_handler = logging.handlers.RotatingFileHandler(
        error_file,
        maxBytes=5*1024*1024,  # 5MB
        backupCount=3,
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(detailed_formatter)
    root_logger.addHandler(error_handler)
    
    # 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞—É–¥–∏—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π (—Ç–æ–ª—å–∫–æ INFO —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏)
    audit_file = str(Path(log_file).parent / "audit.log")
    audit_handler = logging.handlers.RotatingFileHandler(
        audit_file,
        maxBytes=20*1024*1024,  # 20MB
        backupCount=10,
        encoding='utf-8'
    )
    audit_handler.setLevel(logging.INFO)
    audit_handler.setFormatter(detailed_formatter)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∞—É–¥–∏—Ç–∞
    class AuditFilter(logging.Filter):
        def filter(self, record):
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
            message = record.getMessage()
            audit_keywords = [
                "‚úÖ", "‚ùå", "üîÑ", "üìÑ", "üîó", "üë§", "üè∑Ô∏è", "‚≠ê", "üìä", 
                "‚è±Ô∏è", "üíº", "üéØ", "üè¢", "üí¨", "üöÄ", "üìÖ", "üîç"
            ]
            return any(keyword in message for keyword in audit_keywords)
    
    audit_handler.addFilter(AuditFilter())
    root_logger.addHandler(audit_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("requests").setLevel(logging.WARNING)
    logging.getLogger("urllib3").setLevel(logging.WARNING)
    logging.getLogger("aiohttp").setLevel(logging.WARNING)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    
    # –ü–æ–¥–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è uvicorn (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ access –∏ error)
    logging.getLogger("uvicorn.access").setLevel(logging.WARNING)
    logging.getLogger("uvicorn.error").setLevel(logging.WARNING)
    logging.getLogger("uvicorn.asgi").setLevel(logging.WARNING)
    
    # –ü–æ–¥–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ñ–∞–π–ª–æ–≤
    logging.getLogger("uvicorn.reload").setLevel(logging.CRITICAL)
    logging.getLogger("uvicorn.reloaders").setLevel(logging.CRITICAL)
    logging.getLogger("uvicorn.reloaders.watchfiles").setLevel(logging.CRITICAL)
    logging.getLogger("uvicorn.reloaders.stat").setLevel(logging.CRITICAL)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∞–≤–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    logging.getLogger("watchdog").setLevel(logging.CRITICAL)
    logging.getLogger("watchdog.observers").setLevel(logging.CRITICAL)
    logging.getLogger("watchdog.observers.polling").setLevel(logging.CRITICAL)
    logging.getLogger("watchdog.observers.inotify").setLevel(logging.CRITICAL)
    logging.getLogger("watchdog.observers.fsevents").setLevel(logging.CRITICAL)
    logging.getLogger("watchdog.observers.kqueue").setLevel(logging.CRITICAL)
    
    # –ü–æ–¥–∞–≤–ª—è–µ–º –≤—Å–µ uvicorn –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ CRITICAL —É—Ä–æ–≤–µ–Ω—å
    logging.getLogger("uvicorn").setLevel(logging.CRITICAL)
    logging.getLogger("uvicorn.server").setLevel(logging.CRITICAL)
    logging.getLogger("uvicorn.lifespan").setLevel(logging.CRITICAL)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ñ–∞–π–ª–æ–≤
    class ChangeDetectionFilter(logging.Filter):
        def filter(self, record):
            message = record.getMessage()
            # –ü–æ–¥–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ñ–∞–π–ª–æ–≤
            if "change detected" in message.lower() or "file changed" in message.lower():
                return False
            return True
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ root logger
    root_logger.addFilter(ChangeDetectionFilter())
    
    # –ü–æ–¥–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç FastAPI
    logging.getLogger("fastapi").setLevel(logging.WARNING)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    logger = logging.getLogger(__name__)
    logger.info("=" * 80)
    logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    logger.info(f"   üìÅ –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥: {log_file}")
    logger.info(f"   üìÅ –õ–æ–≥ –æ—à–∏–±–æ–∫: {error_file}")
    logger.info(f"   üìÅ –ê—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π: {audit_file}")
    logger.info(f"   üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_level}")
    logger.info(f"   üïê –í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("=" * 80)

def get_audit_logger(name: str) -> logging.Logger:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∞—É–¥–∏—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π
    
    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–æ–±—ã—á–Ω–æ __name__)
    
    Returns:
        Logger –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–ª—è –∞—É–¥–∏—Ç–∞
    """
    logger = logging.getLogger(f"audit.{name}")
    return logger

def log_user_action(logger: logging.Logger, action: str, details: dict = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
        action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    message = f"üë§ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {action}"
    if details:
        detail_str = " | ".join([f"{k}: {v}" for k, v in details.items()])
        message += f" | {detail_str}"
    
    logger.info(message)

def log_system_action(logger: logging.Logger, action: str, details: dict = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
        action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    message = f"‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
    if details:
        detail_str = " | ".join([f"{k}: {v}" for k, v in details.items()])
        message += f" | {detail_str}"
    
    logger.info(message)

def log_api_request(logger: logging.Logger, method: str, endpoint: str, user_id: str = None, details: dict = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
        method: HTTP –º–µ—Ç–æ–¥
        endpoint: API endpoint
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    message = f"üåê API –∑–∞–ø—Ä–æ—Å: {method} {endpoint}"
    if user_id:
        message += f" | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}"
    if details:
        detail_str = " | ".join([f"{k}: {v}" for k, v in details.items()])
        message += f" | {detail_str}"
    
    logger.info(message)

def log_tfs_operation(logger: logging.Logger, operation: str, work_item_id: int = None, details: dict = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å TFS
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
        operation: –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        work_item_id: ID —Ä–∞–±–æ—á–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    message = f"üîß TFS –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}"
    if work_item_id:
        message += f" | ID: {work_item_id}"
    if details:
        detail_str = " | ".join([f"{k}: {v}" for k, v in details.items()])
        message += f" | {detail_str}"
    
    logger.info(message)

def log_confluence_operation(logger: logging.Logger, operation: str, page_id: str = None, details: dict = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å Confluence
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
        operation: –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    message = f"üìö Confluence –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}"
    if page_id:
        message += f" | ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_id}"
    if details:
        detail_str = " | ".join([f"{k}: {v}" for k, v in details.items()])
        message += f" | {detail_str}"
    
    logger.info(message)
