import requests
import base64
import logging
from typing import Optional, List, Dict, Any
from bs4 import BeautifulSoup
from app.config.settings import settings
from app.models.request_models import ConfluenceArticle
from app.models.confluence_models import (
    ConfluencePageRequest, ConfluencePageResponse, ConfluenceTemplate,
    ConfluenceSpace, ConfluencePageUpdateRequest, ConfluenceCommentRequest,
    ConfluenceSearchRequest, ConfluencePageType, ConfluenceRepresentation
)
from app.core.logging_config import log_confluence_operation

logger = logging.getLogger(__name__)

class ConfluenceService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Confluence API"""
    
    def __init__(self):
        self.base_url = settings.CONFLUENCE_URL.rstrip('/')
        self.auth = self._get_auth_headers()
        self.session = requests.Session()
        self.session.headers.update(self.auth)
    
    def _get_auth_headers(self) -> dict:
        """–°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        token = settings.CONFLUENCE_TOKEN
        
        return {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
    
    async def get_spaces(self) -> List[dict]:
        """Get list of Confluence spaces"""
        try:
            url = f"{self.base_url}/rest/api/space"
            params = {"limit": 100}
            
            response = self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            return data.get("results", [])
            
        except Exception as e:
            logger.error(f"Error getting Confluence spaces: {str(e)}")
            return []
    
    def _clean_html_content(self, html_content: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç —Ç–µ–≥–æ–≤"""
        try:
            soup = BeautifulSoup(html_content, 'html.parser')
            # –£–±–∏—Ä–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
            for script in soup(["script", "style"]):
                script.decompose()
            return soup.get_text(separator='\n', strip=True)
        except Exception:
            return html_content
    
    async def search_articles(self, keywords: str) -> List[ConfluenceArticle]:
        """
        –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        
        –ü—Ä–∏–º–µ—Ä: search_articles("tdd –∏—Ç–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ")
        """
        
        search_url = f"{self.base_url}/rest/api/content"
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        params = {
            "title": keywords,  # –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            "expand": "body.storage,space",
            "limit": 10,
            "type": "page"
        }
        
        try:
            logger.info(f"–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –≤ Confluence –ø–æ –∑–∞–ø—Ä–æ—Å—É: {keywords}")
            response = self.session.get(search_url, params=params)
            response.raise_for_status()
            
            data = response.json()
            articles = []
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(data.get('results', []))}")
            
            for item in data.get("results", []):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                content_html = ""
                if "body" in item and "storage" in item["body"]:
                    content_html = item["body"]["storage"]["value"]
                
                # –û—á–∏—â–∞–µ–º HTML
                clean_content = self._clean_html_content(content_html)
                
                article = ConfluenceArticle(
                    id=item["id"],
                    title=item["title"],
                    content=clean_content,
                    space_key=item.get("space", {}).get("key", "")
                )
                articles.append(article)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: {article.title} (ID: {article.id})")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            if not articles:
                articles = await self._search_by_content(keywords)
            
            return articles
            
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Confluence: {str(e)}")
            if hasattr(e.response, 'text'):
                logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.response.text}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Confluence: {str(e)}")
    
    async def _search_by_content(self, keywords: str) -> List[ConfluenceArticle]:
        """–ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ç–∞—Ç–µ–π"""
        search_url = f"{self.base_url}/rest/api/search"
        
        # CQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        cql_query = f'text ~ "{keywords}" and type=page'
        
        params = {
            "cql": cql_query,
            "limit": 10,
            "expand": "content.body.storage,content.space"
        }
        
        try:
            logger.info(f"–ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É: {cql_query}")
            response = self.session.get(search_url, params=params)
            response.raise_for_status()
            
            data = response.json()
            articles = []
            
            for item in data.get("results", []):
                content = item.get("content", {})
                
                content_html = ""
                if "body" in content and "storage" in content["body"]:
                    content_html = content["body"]["storage"]["value"]
                
                clean_content = self._clean_html_content(content_html)
                
                article = ConfluenceArticle(
                    id=content["id"],
                    title=content["title"],
                    content=clean_content,
                    space_key=content.get("space", {}).get("key", "")
                )
                articles.append(article)
            
            return articles
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É: {str(e)}")
            return []
    
    async def get_article_by_id(self, article_id: str) -> Optional[ConfluenceArticle]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –ø–æ ID
        
        –ü—Ä–∏–º–µ—Ä: get_article_by_id("123456")
        """
        
        url = f"{self.base_url}/rest/api/content/{article_id}"
        params = {"expand": "body.storage,space"}
        
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –ø–æ ID: {article_id}")
            response = self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            content_html = ""
            if "body" in data and "storage" in data["body"]:
                content_html = data["body"]["storage"]["value"]
            
            article = ConfluenceArticle(
                id=data["id"],
                title=data["title"],
                content=content_html,
                space_key=data.get("space", {}).get("key", "")
            )
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: {article.title}")
            return article
            
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {str(e)}")
            return None

    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Confluence API"""
        try:
            test_url = f"{self.base_url}/rest/api/space"
            response = self.session.get(test_url, params={"limit": 1})
            response.raise_for_status()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Confluence —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Confluence: {str(e)}")
            return False

    async def create_page(self, title: str, content: str, space_key: str = "DEV", parent_id: str = None) -> dict:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Confluence
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (HTML –∏–ª–∏ Markdown)
            space_key: –ö–ª—é—á –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "DEV")
            parent_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        """
        try:
            logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Confluence: '{title}' –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ '{space_key}'")
            
            url = f"{self.base_url}/rest/api/content"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_data = {
                "type": "page",
                "title": title,
                "space": {"key": space_key},
                "body": {
                    "storage": {
                        "value": content,
                        "representation": "storage"  # HTML —Ñ–æ—Ä–º–∞—Ç
                    }
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if parent_id:
                page_data["ancestors"] = [{"id": parent_id}]
                logger.info(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∫–∞–∫ –¥–æ—á–µ—Ä–Ω—è—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ID: {parent_id}")
            
            response = self.session.post(url, json=page_data)
            response.raise_for_status()
            
            result = response.json()
            page_id = result["id"]
            page_url = f"{self.base_url}/pages/viewpage.action?pageId={page_id}"
            
            logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:")
            logger.info(f"   üìÑ ID: {page_id}")
            logger.info(f"   üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            logger.info(f"   üìÑ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: {space_key}")
            logger.info(f"   üîó URL: {page_url}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            log_confluence_operation(
                logger=logger,
                operation="–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞",
                page_id=page_id,
                details={
                    "title": title,
                    "space_key": space_key,
                    "parent_id": parent_id,
                    "url": page_url,
                    "version": result.get("version", {}).get("number", 1)
                }
            )
            
            return {
                "id": page_id,
                "title": title,
                "url": page_url,
                "space_key": space_key,
                "parent_id": parent_id,
                "created_at": result.get("version", {}).get("when", ""),
                "version": result.get("version", {}).get("number", 1)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '{title}': {str(e)}")
            if hasattr(e, 'response') and e.response is not None:
                logger.error(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.response.text}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Confluence: {str(e)}")

    async def update_page(self, page_id: str, title: str = None, content: str = None) -> dict:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Confluence
        
        Args:
            page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            title: –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            content: –ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        """
        try:
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Confluence: ID {page_id}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            get_url = f"{self.base_url}/rest/api/content/{page_id}"
            get_response = self.session.get(get_url, params={"expand": "version"})
            get_response.raise_for_status()
            
            current_data = get_response.json()
            current_version = current_data["version"]["number"]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = {
                "version": {"number": current_version + 1}
            }
            
            if title:
                update_data["title"] = title
                logger.info(f"   üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞: '{title}'")
            
            if content:
                update_data["body"] = {
                    "storage": {
                        "value": content,
                        "representation": "storage"
                    }
                }
                logger.info(f"   üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            update_url = f"{self.base_url}/rest/api/content/{page_id}"
            response = self.session.put(update_url, json=update_data)
            response.raise_for_status()
            
            result = response.json()
            page_url = f"{self.base_url}/pages/viewpage.action?pageId={page_id}"
            
            logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:")
            logger.info(f"   üìÑ ID: {page_id}")
            logger.info(f"   üìÑ –í–µ—Ä—Å–∏—è: {result.get('version', {}).get('number', 'N/A')}")
            logger.info(f"   üîó URL: {page_url}")
            
            return {
                "id": page_id,
                "title": result.get("title", title),
                "url": page_url,
                "version": result.get("version", {}).get("number", current_version + 1),
                "updated_at": result.get("version", {}).get("when", "")
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ID {page_id}: {str(e)}")
            if hasattr(e, 'response') and e.response is not None:
                logger.error(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.response.text}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Confluence: {str(e)}")

    async def add_comment(self, page_id: str, comment: str) -> dict:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ Confluence
        
        Args:
            page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            comment: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        """
        try:
            logger.info(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ID: {page_id}")
            
            url = f"{self.base_url}/rest/api/content"
            
            comment_data = {
                "type": "comment",
                "container": {
                    "id": page_id,
                    "type": "page"
                },
                "body": {
                    "storage": {
                        "value": comment,
                        "representation": "storage"
                    }
                }
            }
            
            response = self.session.post(url, json=comment_data)
            response.raise_for_status()
            
            result = response.json()
            comment_id = result["id"]
            
            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
            logger.info(f"   üí¨ ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {comment_id}")
            logger.info(f"   üìÑ –ö —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {page_id}")
            logger.info(f"   üìù –¢–µ–∫—Å—Ç: {comment[:50]}...")
            
            return {
                "id": comment_id,
                "page_id": page_id,
                "comment": comment,
                "created_at": result.get("version", {}).get("when", "")
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ID {page_id}: {str(e)}")
            if hasattr(e, 'response') and e.response is not None:
                logger.error(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.response.text}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ Confluence: {str(e)}")

    async def create_page_from_request(self, request: ConfluencePageRequest) -> ConfluencePageResponse:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Confluence –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            request: –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        Returns:
            ConfluencePageResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Confluence –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: '{request.title}'")
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —à–∞–±–ª–æ–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if request.template_id:
                template = await self.get_template(request.template_id)
                if template:
                    content = await self._apply_template(template, request.template_data or {})
                else:
                    content = request.content
            else:
                content = request.content
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            result = await self.create_page(
                title=request.title,
                content=content,
                space_key=request.space_key,
                parent_id=request.parent_id
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            if request.labels:
                await self._add_labels_to_page(result["id"], request.labels)
            
            return ConfluencePageResponse(
                success=True,
                page_id=result["id"],
                title=result["title"],
                url=result["url"],
                space_key=result["space_key"],
                version=result["version"],
                created_at=result["created_at"]
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return ConfluencePageResponse(
                success=False,
                error=str(e)
            )

    async def get_templates(self, space_key: str = None) -> List[ConfluenceTemplate]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        
        Args:
            space_key: –ö–ª—é—á –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
        
        Returns:
            List[ConfluenceTemplate]: –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        """
        try:
            logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ Confluence")
            
            url = f"{self.base_url}/rest/api/template"
            params = {"limit": 100}
            
            if space_key:
                params["spaceKey"] = space_key
            
            response = self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            templates = []
            
            for item in data.get("results", []):
                template = ConfluenceTemplate(
                    id=item["id"],
                    name=item["name"],
                    description=item.get("description"),
                    space_key=item.get("space", {}).get("key", ""),
                    content=item.get("body", {}).get("storage", {}).get("value"),
                    variables=item.get("variables", [])
                )
                templates.append(template)
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
            return templates
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            return []

    async def get_template(self, template_id: str) -> Optional[ConfluenceTemplate]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø–æ ID
        
        Args:
            template_id: ID —à–∞–±–ª–æ–Ω–∞
        
        Returns:
            ConfluenceTemplate: –®–∞–±–ª–æ–Ω –∏–ª–∏ None
        """
        try:
            logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ ID: {template_id}")
            
            url = f"{self.base_url}/rest/api/template/{template_id}"
            response = self.session.get(url)
            response.raise_for_status()
            
            data = response.json()
            template = ConfluenceTemplate(
                id=data["id"],
                name=data["name"],
                description=data.get("description"),
                space_key=data.get("space", {}).get("key", ""),
                content=data.get("body", {}).get("storage", {}).get("value"),
                variables=data.get("variables", [])
            )
            
            logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω –ø–æ–ª—É—á–µ–Ω: {template.name}")
            return template
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ {template_id}: {str(e)}")
            return None

    async def get_spaces(self) -> List[ConfluenceSpace]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ Confluence
        
        Returns:
            List[ConfluenceSpace]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
        """
        try:
            logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ Confluence")
            
            url = f"{self.base_url}/rest/api/space"
            params = {"limit": 100}
            
            response = self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            spaces = []
            
            for item in data.get("results", []):
                space = ConfluenceSpace(
                    key=item["key"],
                    name=item["name"],
                    description=item.get("description"),
                    url=item.get("_links", {}).get("webui")
                )
                spaces.append(space)
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(spaces)} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤")
            return spaces
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {str(e)}")
            return []

    async def search_pages(self, request: ConfluenceSearchRequest) -> List[ConfluenceArticle]:
        """
        –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ Confluence
        
        Args:
            request: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫
        
        Returns:
            List[ConfluenceArticle]: –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            logger.info(f"üîÑ –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ Confluence: '{request.query}'")
            
            url = f"{self.base_url}/rest/api/content"
            params = {
                "title": request.query,
                "type": request.content_type,
                "limit": request.limit,
                "start": request.start,
                "expand": "body.storage,space"
            }
            
            if request.space_key:
                params["spaceKey"] = request.space_key
            
            response = self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            articles = []
            
            for item in data.get("results", []):
                content_html = ""
                if "body" in item and "storage" in item["body"]:
                    content_html = item["body"]["storage"]["value"]
                
                clean_content = self._clean_html_content(content_html)
                
                article = ConfluenceArticle(
                    id=item["id"],
                    title=item["title"],
                    content=clean_content,
                    space_key=item.get("space", {}).get("key", "")
                )
                articles.append(article)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç—Ä–∞–Ω–∏—Ü")
            return articles
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü: {str(e)}")
            return []

    async def _apply_template(self, template: ConfluenceTemplate, data: Dict[str, Any]) -> str:
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            template: –®–∞–±–ª–æ–Ω
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Returns:
            str: –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        """
        try:
            content = template.content or ""
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ
            for key, value in data.items():
                placeholder = f"{{{{{key}}}}}"
                content = content.replace(placeholder, str(value))
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            standard_vars = {
                "{{date}}": data.get("date", ""),
                "{{time}}": data.get("time", ""),
                "{{user}}": data.get("user", ""),
                "{{project}}": data.get("project", ""),
                "{{task_id}}": data.get("task_id", ""),
                "{{title}}": data.get("title", ""),
                "{{description}}": data.get("description", "")
            }
            
            for placeholder, value in standard_vars.items():
                content = content.replace(placeholder, str(value))
            
            return content
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            return template.content or ""

    async def _add_labels_to_page(self, page_id: str, labels: List[str]):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        Args:
            page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            labels: –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫
        """
        try:
            logger.info(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_id}: {labels}")
            
            url = f"{self.base_url}/rest/api/content/{page_id}/label"
            
            for label in labels:
                label_data = {"name": label}
                response = self.session.post(url, json=label_data)
                response.raise_for_status()
            
            logger.info(f"‚úÖ –ú–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–æ–∫: {str(e)}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
confluence_service = ConfluenceService()
